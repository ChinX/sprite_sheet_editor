<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-9 -->
<!-- 预览创建或者打开的Sprite Sheet，并对其进行编辑、优化和保存 -->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:comps="comps.*"
				   implements="interf.IStateChanged">
	<fx:Declarations>
		<s:RadioButtonGroup id="frameDisplayRBG" change="updateFrameDisplay()"/>
	</fx:Declarations>
	<s:BorderContainer width="320" height="100%" borderColor="0x878787" backgroundAlpha="0">
		<s:VGroup id="leftPanel" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<s:BorderContainer width="100%" backgroundColor="0x696969">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
				</s:layout>
				<s:Label text="位图动画预览" fontWeight="bold"/>
				<comps:BMPPreview id="ani" backgroundColor="0x696969" width="100%" height="220"/>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label id="frameLabel" width="50" text="{framesAndLabels.selectedFrameNum}"/>
					<s:ToggleButton id="playBTN" label="{playBTN.selected?'暂停':'播放'}" width="100%"
									enabled="{framesAndLabels.selectedFrameIndices&amp;&amp;framesAndLabels.selectedFrameIndices.length>1}"
									click="handler_playBTNclick(event)"/>
					<s:Spacer width="100%" height="20"/>
					<s:RadioButton id="disFrameRB" width="100%" label="修剪"
								   groupName="frameDisplayRBG" selected="true"
								   toolTip="显示修剪空白后的帧的宽高"/>
					<s:RadioButton id="disOriginRB" width="100%" label="原始"
								   groupName="frameDisplayRBG"
								   toolTip="显示修剪空白前的帧的宽高，在实际的程序中会使用这个宽高。修剪空白是为了减小文件尺寸。如果文件没有进行过修剪，则原始Rect的w、h与修剪的相等。"/>
				</s:HGroup>
			</s:BorderContainer>
			<comps:FramesAndLabels id="framesAndLabels" width="100%" backgroundColor="0x696969"
								change="handler_framesAndLabelsChange(event)"/>
			<comps:BuildSetting id="optPanel" width="100%" backgroundColor="0x696969" 
								currentState="buildAndOpt" build="handler_opt(event)"/>
			<comps:SaveSheetSetting id="saveSheet" width="100%" backgroundColor="0x696969"
									saveAll="handler_saveAll(event)"
									saveMeta="handler_saveMeta(event)"
									savePic="handler_savePic(event)"/>
			<comps:SaveSeqSetting id="saveSeq" width="100%" backgroundColor="0x696969"
								  title="{disFrameRB.selected?'保存序列(修剪尺寸)':'保存序列(原始尺寸)'}"
								  saveSeq="handler_saveSeq(event)"/>
		</s:VGroup>
	</s:BorderContainer>
	<s:VScrollBar height="100%" viewport="{leftPanel}"/>
	<comps:BMPPreview id="sheet" width="100%" height="100%"  borderColor="0x878787" backgroundAlpha="0"/>
	<fx:Script>
	<![CDATA[
		import com.adobe.serialization.json.JSON;
		
		import events.InfoEvent;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.graphics.codec.JPEGEncoder;
		import mx.graphics.codec.PNGEncoder;
		
		import org.zengrong.display.spritesheet.MaskType;
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.display.spritesheet.SpriteSheetType;
		import org.zengrong.utils.BitmapUtil;
		import org.zengrong.utils.MathUtil;
		import org.zengrong.utils.Vec2D;
		
		import spark.globalization.supportClasses.GlobalizationBase;
		
		import type.StateType;
		
		import utils.FileProcessor;
		import utils.Funs;
		import utils.Global;
		
		import vo.FrameVO;
		
		public function updateOnStateChanged($old:String, $new:String):void
		{
			if($new == StateType.SS)
			{
				//更新调整后的Sheet
				Global.instance.adjustedSheet = Global.instance.sheet.clone();
				if($old == StateType.START)
				{
					//如果是直接从START跳转过来，就将修剪空白版本的Frame赋值给adjustedSheet
					//因为SpriteSheet可能是修剪过的
					Global.instance.adjustedSheet.setFrames(Global.instance.sheet.createAll(false));
				}
				sheet.source = Global.instance.adjustedSheet.bitmapData;
				//sheet的name是在编辑器的图像文件处理状态中被加入的，如果没有经历过图像文件处理状态，则hasName为false
				//这里根据是否拥有name，来显示(选择)或者隐藏(不选择)nameCB，从而影响最终生成的Metadata中的name的值
				saveSheet.nameCB.visible = Global.instance.sheet.metadata.hasName;
				saveSheet.nameCB.selected =Global.instance.sheet.metadata.hasName;
				//从SpriteSheet中初始化Label和Frame
				framesAndLabels.init();
				this.addEventListener(Event.ENTER_FRAME, handler_enterFrame);
			}
			else
			{
				framesAndLabels.destroy();
				sheet.viewer.bitmapData.dispose();
				sheet.viewer.source = null;
				Global.instance.adjustedSheet.destroy();
				Global.instance.adjustedSheet = null;
				this.removeEventListener(Event.ENTER_FRAME, handler_enterFrame);
			}
		}
		
		/**
		 * 更新帧显示
		 */
		private function updateFrameDisplay():void
		{
			var __frameBmd:BitmapData = null;
			if(framesAndLabels.selectedFrameIndex > -1)
			{
				//根据选择显示原始的或者修剪过的Frame
				__frameBmd = disFrameRB.selected ? 
					Global.instance.adjustedSheet.getBMDByIndex(framesAndLabels.selectedFrameIndex) : 
					Global.instance.sheet.getBMDByIndex(framesAndLabels.selectedFrameIndex);
			}
			ani.source = __frameBmd;
		}
		
		private function getMetadata():String
		{
			if(saveSheet.jsonRB.selected)
				return JSON.encode(Global.instance.adjustedSheet.metadata.toObject(saveSheet.simpleCB.selected, saveSheet.nameCB.selected));
			if(saveSheet.xmlRB.selected)
				return Global.instance.adjustedSheet.metadata.toXMLString(saveSheet.simpleCB.selected, saveSheet.nameCB.selected);
			return Global.instance.adjustedSheet.metadata.toTXT(saveSheet.simpleCB.selected, saveSheet.nameCB.selected);
		}
		
		/**
		 * 更新spriteSheet的值
		 */
		private function updateSheet():void
		{
			//hasName, names, namesIndex, totalFrame, frameSizeRect 这几个变量
			//是在生成Sheet的时候填充的，因此这里不需要更新
			var __meta:SpriteSheetMetadata = Global.instance.adjustedSheet.metadata;
			__meta.type = saveSheet.sheetType;
			__meta.maskType = saveSheet.maskDDL.selectedIndex;
			var __labelMeta:Object = framesAndLabels.getLabels();
			__meta.hasLabel = __labelMeta.hasLabel;
			__meta.labels = __labelMeta.labels;
			__meta.labelsFrame = __labelMeta.labelsFrame;
		}
		
		//----------------------------------------
		// handler
		//----------------------------------------
		/**
		 * 实现帧的动画预览
		 */
		private function handler_enterFrame($evt:Event):void
		{
			if(framesAndLabels.playing)
			{
				framesAndLabels.nextFrame();
			}
		}
		
		/**
		 * Lable修改的时候更新动画预览
		 */
		protected function handler_framesAndLabelsChange($event:Event):void
		{
			updateFrameDisplay();
		}
		
		/**
		 * 保存metadata和位图
		 */
		protected function handler_saveAll($event:InfoEvent):void
		{
			updateSheet();
			var __bmd:BitmapData = getBitmapDataForSave(
				Global.instance.adjustedSheet.bitmapData,
				saveSheet.maskDDL.selectedIndex,
				optPanel.transparentCB.selected,
				optPanel.bgColorPicker.selectedColor
			);
			var __data:Object = {meta:getMetadata(), bitmapData:__bmd};
			FileProcessor.instance.saveAll(__data, [saveSheet.picRBG.selectedValue.toString(),saveSheet.metaRBG.selectedValue.toString()]);
		}
		
		protected function handler_saveMeta($event:InfoEvent):void
		{
			updateSheet();
			FileProcessor.instance.saveMeta(getMetadata(), saveSheet.metaRBG.selectedValue.toString());
		}
		
		protected function handler_savePic($event:InfoEvent):void
		{
			updateSheet();
			var __bmd:BitmapData = getBitmapDataForSave(
				Global.instance.adjustedSheet.bitmapData,
				saveSheet.maskDDL.selectedIndex,
				optPanel.transparentCB.selected,
				optPanel.bgColorPicker.selectedColor
			);
			FileProcessor.instance.saveSS(
				__bmd, 
				saveSheet.picRBG.selectedValue.toString(),
				saveSheet.quality.value
			);
		}
		
		protected function handler_saveSeq($event:InfoEvent):void
		{
			//根据显示的帧类型来保存序列
			var __bmds:Vector.<BitmapData> = disFrameRB.selected ? 
				Global.instance.adjustedSheet.getAll():
				Global.instance.sheet.getAll();
			FileProcessor.instance.saveSeq(
				__bmds,
				saveSeq.getFileNames(Global.instance.adjustedSheet.metadata.totalFrame),
				(saveSeq.quality?saveSeq.quality.value:0)
			)
		}
		
		protected function handler_opt(event:InfoEvent):void
		{
			var __bmds:Vector.<BitmapData> = null;
			var __frameRects:Vector.<Rectangle> = null;
			var __originalRects:Vector.<Rectangle> = null; 
			if(optPanel.trimCB.selected)
			{
				__bmds = new Vector.<BitmapData>;
				__frameRects = new Vector.<Rectangle>;
				__originalRects = new Vector.<Rectangle>; 
				var __sizeRect:Rectangle = null;
				var i:int=0;
				for (i = 0; i < Global.instance.sheet.metadata.totalFrame; i++) 
				{
					var __trimObj:Object = BitmapUtil.trim(Global.instance.sheet.getBMDByIndex(i));
					__sizeRect = Global.instance.sheet.metadata.frameRects[i];
					__frameRects[i] = __trimObj.rect;
					__bmds[i] = __trimObj.bitmapData;
					__originalRects[i] = new Rectangle(0-__trimObj.rect.x,0-__trimObj.rect.y,__sizeRect.width, __sizeRect.height);
				}
			}
			else
			{
				__bmds = Global.instance.sheet.cloneFrames();
				__frameRects = Global.instance.sheet.metadata.frameRects.concat();
				__originalRects = Global.instance.sheet.metadata.originalFrameRects.concat();
			}
			var __whRect:Rectangle = new Rectangle();
			var __newFrameRects:Vector.<Rectangle> = new Vector.<Rectangle>;
			//重新计算出最终Sheet的宽高以及修改过的frameRect
			optimizeSheet(__frameRects, 
				__newFrameRects, 
				__whRect,
				optPanel.whDDL.selectedIndex == 0, 
				optPanel.whNS.value,
				optPanel.powerOf2CB.selected,
				optPanel.squareCB.selected
			);
			Global.instance.adjustedSheet.setFrames(__bmds, __newFrameRects, __originalRects);
			//绘制大Sheet位图
			var __sheetBmd:BitmapData = new BitmapData(__whRect.width, __whRect.height, optPanel.transparentCB.selected, optPanel.bgColorPicker.selectedColor);
			Global.instance.adjustedSheet.drawSheet(__sheetBmd);
			sheet.source = Global.instance.adjustedSheet.bitmapData;
			//显示优化过的Frame
			disFrameRB.selected = true;
		}
		

		/**
		 * 根据提供的Rectangle数组计算最终Sheet的宽高
		 * @param $frameRect 当前帧的独立大小
		 */
		private function optimizeSheet($trimRects:Vector.<Rectangle>, 
										$newSizeRects:Vector.<Rectangle>,
										$whRect:Rectangle, 
										$limitW:Boolean, 
										$wh:int,
										$powOf2:Boolean=false,
										$square:Boolean=false):void
		{
			var __frameRect:Rectangle = $trimRects[0];
			$newSizeRects[0] = new Rectangle(0,0,__frameRect.width, __frameRect.height);
			var __rectInSheet:Rectangle = new Rectangle(0,0,__frameRect.width,__frameRect.height);
			//设置sheet的初始宽高
			if($limitW)
			{
				//若限制宽度小于帧的宽度，就扩大限制宽度
				$whRect.width = $wh;
				if($whRect.width<__frameRect.width) $whRect.width = __frameRect.width;
				//计算2的幂
				if($powOf2) $whRect.width = MathUtil.nextPowerOf2($whRect.width);
				$whRect.height = __frameRect.height;
			}
			else
			{
				$whRect.height = $wh;
				if($whRect.height<__frameRect.height) $whRect.height = __frameRect.height;
				if($powOf2) $whRect.height = MathUtil.nextPowerOf2($whRect.height);
				$whRect.width = __frameRect.width;
			}
			for (var i:int = 1; i < $trimRects.length; i++) 
			{
				__frameRect = $trimRects[i];
				Funs.updateRectInSheet(__rectInSheet, $whRect, __frameRect, $limitW);
				trace('getSheetWH:', __rectInSheet, $whRect, __frameRect);
				$newSizeRects[i] = __rectInSheet.clone();
			}
			if($square)
			{
				//计算正方形的尺寸
				if($whRect.width!=$whRect.height)
				{
					//使用当前计算出的面积开方得到正方形的基准尺寸
					var __newWH:int = Math.sqrt($whRect.width*$whRect.height);
					//使用基准尺寸重新排列一次
					optimizeSheet($trimRects,$newSizeRects,$whRect,$limitW,__newWH, $powOf2);
					//trace('正方形计算1:', $whRect);
					//如果基准尺寸无法实现正方形尺寸，就使用结果WH中比较大的那个尺寸作为正方形边长
					if($whRect.width!=$whRect.height)
					{
						var __max:int = Math.max($whRect.width, $whRect.height);
						$whRect.width = __max;
						$whRect.height = __max;
					}
					//trace('正方形计算2:', $whRect);
				}
					
			}
			if($powOf2)
			{
				$whRect.width = MathUtil.nextPowerOf2($whRect.width);
				$whRect.height = MathUtil.nextPowerOf2($whRect.height);
			}
		}
		
		/**
		 * 绘制Mask，返回带有Mask的位图（如果有mask的话）
		 */
		private function getBitmapDataForSave($bitmapData:BitmapData, $maskType:int, $transparent:Boolean, $bgcolor:uint):BitmapData
		{
			if(MaskType.useMask($maskType))
			{
				var __sourceRect:Rectangle = new Rectangle(0, 0, $bitmapData.width, $bitmapData.height);
				var __destRect:Rectangle = new Rectangle(0, 0, $bitmapData.width, $bitmapData.height);
				var __point:Point = new Point(0,0);
				//用于Alpha通道部分的背景色
				var __alphaBG:uint = 0xFF000000;
				//新建一个带有Mask大小的位图
				var __saveBmd:BitmapData = null;
				if($maskType == MaskType.HOR_MASK)
				{
					__saveBmd = new BitmapData($bitmapData.width*2, $bitmapData.height, $transparent, $bgcolor);
					__destRect.x = $bitmapData.width;
					__point.x = __destRect.x;
				}
				else if($maskType == MaskType.VER_MASK)
				{
					__saveBmd = new BitmapData($bitmapData.width, $bitmapData.height*2, $transparent, $bgcolor);
					__destRect.y = $bitmapData.height;
					__point.y = __destRect.y;
				}
				__saveBmd.copyPixels($bitmapData, __sourceRect, new Point(0,0), null, null, true);
				//为mask填充一个背景色
				__saveBmd.fillRect(__destRect, __alphaBG);
				//分别填充红绿蓝通道，这样生成出的透明的部分才是白色
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 1);
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 2);
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 4);
				return __saveBmd;
			}
			return $bitmapData;
		}
		
		protected function handler_playBTNclick($event:MouseEvent):void
		{
			if(playBTN.selected)
				framesAndLabels.play();
			else
				framesAndLabels.pause();
			
		}
		
	]]>
	</fx:Script>
</s:HGroup>
