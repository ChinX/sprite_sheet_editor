<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-9 -->
<!-- 预览创建或者打开的Sprite Sheet，并对其进行编辑、优化和保存 -->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:comps="comps.*"
				   implements="interf.IStateChanged">
	<s:BorderContainer width="300" height="100%" borderColor="0x878787" backgroundAlpha="0">
		<s:VGroup id="leftPanel" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<s:BorderContainer width="100%" backgroundColor="0x696969">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
				</s:layout>
				<s:Label text="位图动画预览" fontWeight="bold"/>
				<comps:BMPPreview id="ani" backgroundColor="0x696969" width="100%" height="220"/>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:ToggleButton id="playBTN" label="{playBTN.selected?'||':'>'}" width="30"/>
					<s:NumericStepper id="playFrameNS" width="50" value="{_currentFrame}" minimum="{labelSetting.firstFrame}" maximum="{labelSetting.firstFrame+labelSetting.framesCount-1}" change="handler_playFrameNSchange(event)"/>
					<s:Label id="frameLabel" width="100%" text="{getFrameLabelText()}"/>
				</s:HGroup>
				<s:Label id="frameInfo" width="100%"/>
			</s:BorderContainer>
			<comps:LabelSetting id="labelSetting" width="100%" height="200" backgroundColor="0x696969"
								change="handler_labelSettingChange(event)"/>
			<comps:BuildSetting id="optimization" width="100%" backgroundColor="0x696969" buildTitle="优化"
								build="handler_opt(event)"/>
			<comps:SaveSheetSetting id="saveSheetPanel" width="100%" backgroundColor="0x696969"
									saveAll="handler_saveAll(event)"
									saveMeta="handler_saveMeta(event)"
									savePic="handler_savePic(event)"/>
			<comps:SaveSeqSetting id="saveSeqPanel" width="100%" backgroundColor="0x696969"
								  saveSeq="handler_saveSeq(event)"/>
		</s:VGroup>
	</s:BorderContainer>
	<s:VScrollBar height="100%" viewport="{leftPanel}"/>
	<comps:BMPPreview id="sheet" width="100%" height="100%"  borderColor="0x878787" backgroundAlpha="0"/>
	<fx:Script>
	<![CDATA[
		import com.adobe.serialization.json.JSON;
		
		import events.InfoEvent;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.graphics.codec.JPEGEncoder;
		import mx.graphics.codec.PNGEncoder;
		
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.display.spritesheet.SpriteSheetType;
		import org.zengrong.utils.BitmapUtil;
		import org.zengrong.utils.Vec2D;
		
		import type.StateType;
		
		import utils.FileProcessor;
		import utils.Funs;
		import utils.Global;
		import utils.MetadataBuilder;
		
		//正在播放的帧
		[Bindable] private var _currentFrame:int=0;
		
		public function updateOnStateChanged($old:String, $new:String):void
		{
			if($new == StateType.SS)
			{
				//更新调整后的Sheet
				Global.instance.adjustedSheet = Global.instance.sheet.clone();
				sheet.source = Global.instance.adjustedSheet.bitmapData;
				//sheet的name是在编辑器的图像文件处理状态中被加入的，如果没有经历过图像文件处理状态，则hasName为false
				//这里根据是否拥有name，来显示(选择)或者隐藏(不选择)nameCB，从而影响最终生成的Metadata中的name的值
				saveSheetPanel.nameCB.visible = Global.instance.sheet.metadata.hasName;
				saveSheetPanel.nameCB.selected =Global.instance.sheet.metadata.hasName; 
				initLabelAndFrame();
				this.addEventListener(Event.ENTER_FRAME, handler_enterFrame);
			}
			else
			{
				labelSetting.destroy();
				sheet.viewer.bitmapData.dispose();
				sheet.viewer.source = null;
				Global.instance.adjustedSheet.destroy();
				Global.instance.adjustedSheet = null;
				_currentFrame = 0;
				this.removeEventListener(Event.ENTER_FRAME, handler_enterFrame);
			}
		}
		
		/**
		 * 从SpriteSheet中初始化Label和Frame
		 */
		private function initLabelAndFrame():void
		{
			labelSetting.frameAC = new ArrayCollection();
			labelSetting.firstFrame = 0;
			labelSetting.framesCount = Global.instance.adjustedSheet.metadata.totalFrame;
			for (var i:int = 0; i < Global.instance.adjustedSheet.metadata.totalFrame; i++) 
			{
				//默认情况下选择的帧就是所有帧
				labelSetting.frameAC.addItem(i);
			}
			
			labelSetting.labelCB.selected = Global.instance.sheet.metadata.hasLabel;
			labelSetting.labelAL = new ArrayList();
			if(Global.instance.sheet.metadata.hasLabel)
			{
				var __label:String = '';
				for (var j:int = 0; j < Global.instance.sheet.metadata.labels.length; j++) 
				{
					__label = Global.instance.sheet.metadata.labels[j];
					labelSetting.labelAL.addItem({label:__label, frame:Global.instance.sheet.metadata.labelsFrame[__label]});
				}
			}
			dispatchEvent(new Event('frameOrLabelChange'));
		}
		
		[Bindable(event='frameOrLabelChange')]
		private function getFrameLabelText():String
		{
			var __frames:String = '';
			if(labelSetting.framesCount>1)
				__frames = labelSetting.firstFrame+'-'+(labelSetting.firstFrame+labelSetting.framesCount-1)+'帧';
			else
				__frames = '第'+labelSetting.firstFrame+'帧';
			if(labelSetting.selectedLabel)
				return 'Label:'+labelSetting.selectedLabel+' '+__frames;
			return __frames;
		}
		
		/**
		 * 更新帧显示
		 */
		private function updateFrameDisplay():void
		{
			var __sheet:SpriteSheet = Global.instance.adjustedSheet;
			var __sizeRect:Rectangle = __sheet.metadata.frameRects[_currentFrame];
			var __trimRect:Rectangle = __sheet.metadata.originalFrameRects[_currentFrame];
			var __name:String = '';
			if(__sheet.metadata.hasName)
				__name = '\nname:'+__sheet.metadata.names[_currentFrame-1];
			frameInfo.text = 'size x:'+__sizeRect.x+',y:'+__sizeRect.y+',w:'+__sizeRect.width+',h:'+__sizeRect.height+
				'\ntrim x:'+__trimRect.x+',y:'+__trimRect.y+',w:'+__trimRect.width+',h:'+__trimRect.height+__name;
			ani.source = Global.instance.adjustedSheet.getBMDByIndex(_currentFrame);
			trace('载入第'+_currentFrame+'帧');
		}
		
		private function getMetadata():String
		{
			if(saveSheetPanel.jsonRB.selected)
				return JSON.encode(Global.instance.adjustedSheet.metadata.toObject(saveSheetPanel.simpleCB.selected, saveSheetPanel.nameCB.selected));
			if(saveSheetPanel.xmlRB.selected)
				return Global.instance.adjustedSheet.metadata.toXMLString(saveSheetPanel.simpleCB.selected, saveSheetPanel.nameCB.selected);
			return Global.instance.adjustedSheet.metadata.toTXT(saveSheetPanel.simpleCB.selected, saveSheetPanel.nameCB.selected);
		}
		
		/**
		 * 更新spriteSheet的值
		 */
		private function updateSheet():void
		{
			//hasName, names, namesIndex, totalFrame, frameSizeRect 这几个变量
			//是在生成Sheet的时候填充的，因此这里不需要更新
			var __meta:SpriteSheetMetadata = Global.instance.adjustedSheet.metadata;
			__meta.type = saveSheetPanel.sheetType;
			__meta.hasLabel = labelSetting.labelCB.selected;
			__meta.maskType = saveSheetPanel.maskDDL.selectedIndex;
			if(__meta.hasLabel)
			{
				var __labels:Vector.<String> = new Vector.<String>(labelSetting.labelAL.length, true);
				var __labelsFrame:Object = {};
				var __labelItem:Object = null;
				for (var i:int = 0; i < labelSetting.labelAL.length; i++) 
				{
					__labelItem = labelSetting.labelAL.getItemAt(i);
					__labels[i] = __labelItem.label;
					__labelsFrame[__labelItem.label] = __labelItem.frame;
				}
				__meta.labels = __labels;
				__meta.labelsFrame = __labelsFrame;
			}
		}
		
		//----------------------------------------
		// handler
		//----------------------------------------
		/**
		 * 实现帧的动画预览
		 */
		private function handler_enterFrame($evt:Event):void
		{
			if(playBTN.selected)
			{
				//判断当前播放的帧不要超过总帧数索引范围
				if(_currentFrame >= (labelSetting.firstFrame+labelSetting.framesCount))
					_currentFrame = labelSetting.firstFrame;
				updateFrameDisplay();
				_currentFrame ++;
			}
		}
		
		/**
		 * Lable修改的时候更新动画预览
		 */
		protected function handler_labelSettingChange($event:Event):void
		{
			playBTN.selected = false;
			_currentFrame = labelSetting.firstFrame;
			updateFrameDisplay();
			dispatchEvent(new Event('frameOrLabelChange'));
		}
		
		protected function handler_playFrameNSchange($event:Event):void
		{
			_currentFrame = playFrameNS.value;
			updateFrameDisplay();
		}
		
		/**
		 * 保存metadata和位图
		 */
		protected function handler_saveAll($event:InfoEvent):void
		{
			updateSheet();
			var __data:Object = {meta:getMetadata(), bitmapData:Global.instance.adjustedSheet.bitmapData};
			FileProcessor.instance.saveAll(__data, [saveSheetPanel.picRBG.selectedValue.toString(),saveSheetPanel.metaRBG.selectedValue.toString()]);
		}
		
		protected function handler_saveMeta($event:InfoEvent):void
		{
			updateSheet();
			FileProcessor.instance.saveMeta(getMetadata(), saveSheetPanel.metaRBG.selectedValue.toString());
		}
		
		protected function handler_savePic($event:InfoEvent):void
		{
			updateSheet();
			FileProcessor.instance.saveSS(
				Global.instance.adjustedSheet.bitmapData, 
				saveSheetPanel.picRBG.selectedValue.toString(),
				saveSheetPanel.quality.value
			);
		}
		
		protected function handler_saveSeq($event:InfoEvent):void
		{
			updateSheet();
			FileProcessor.instance.saveSeq(
				Global.instance.adjustedSheet.getAll(),
				saveSeqPanel.getFileNames(Global.instance.adjustedSheet.metadata.totalFrame),
				(saveSeqPanel.quality?saveSeqPanel.quality.value:0)
			)
		}
		
		protected function handler_opt(event:InfoEvent):void
		{
			var __bmds:Vector.<BitmapData> = new Vector.<BitmapData>;
			var __trimRects:Vector.<Rectangle> = new Vector.<Rectangle>;
			var __originalRects:Vector.<Rectangle> = new Vector.<Rectangle>; 
			var __sizeRect:Rectangle = null;
			var i:int=0;
			for (i = 0; i < Global.instance.sheet.metadata.totalFrame; i++) 
			{
				var __trimObj:Object = BitmapUtil.trim(Global.instance.sheet.getBMDByIndex(i));
				__sizeRect = Global.instance.sheet.metadata.frameRects[i];
				__trimRects[i] = __trimObj.rect;
				__bmds[i] = __trimObj.bitmapData;
				__originalRects[i] = new Rectangle(0-__trimObj.rect.x,0-__trimObj.rect.y,__sizeRect.width, __sizeRect.height);
			}
			
			var __whRect:Rectangle = new Rectangle();
			var __newFrameRects:Vector.<Rectangle> = new Vector.<Rectangle>;
			//根据trim过的帧大小计算出最终Sheet的宽高以及修改过的frameRect
			optimizeSheet(__trimRects, __newFrameRects, __whRect,
				optimization.whDDL.selectedIndex == 0,optimization.whNS.value);
			Global.instance.adjustedSheet.setFrames(__bmds, __newFrameRects, __originalRects);
			//绘制大Sheet位图
			var __sheetBmd:BitmapData = new BitmapData(__whRect.width, __whRect.height, optimization.transparentCB.selected, optimization.bgColorPicker.selectedColor);
			Global.instance.adjustedSheet.drawSheet(__sheetBmd);
			sheet.source = Global.instance.adjustedSheet.bitmapData;
		}
		

		/**
		 * 根据提供的Rectangle数组计算最终Sheet的宽高
		 * @param $frameRect 当前帧的独立大小
		 */
		private function optimizeSheet($trimRects:Vector.<Rectangle>, $newSizeRects:Vector.<Rectangle>, $whRect:Rectangle, $limitW:Boolean, $wh:int):void
		{
			var __sw:int=0;
			var __sh:int=0;
			var __frameRect:Rectangle = $trimRects[0];
			$newSizeRects[0] = new Rectangle(0,0,__frameRect.width, __frameRect.height);
			var __rectInSheet:Rectangle = new Rectangle(0,0,__frameRect.width,__frameRect.height);
			//设置sheet的初始宽高
			if($limitW)
			{
				//若限制宽度小于帧的宽度，就扩大限制宽度
				$whRect.width = $wh;
				if($whRect.width<__frameRect.width) $whRect.width = __frameRect.width;
				$whRect.height = __frameRect.height;
			}
			else
			{
				$whRect.height = $wh;
				if($whRect.height<__frameRect.height) $whRect.height = __frameRect.height;
				$whRect.width = __frameRect.width;
			}
			for (var i:int = 1; i < $trimRects.length; i++) 
			{
				__frameRect = $trimRects[i];
				Funs.updateRectInSheet(__rectInSheet, $whRect, __frameRect, $limitW);
				trace('getSheetWH:', __rectInSheet, $whRect, __frameRect);
				$newSizeRects[i] = __rectInSheet.clone();
			}
		}
	]]>
	</fx:Script>
</s:HGroup>
