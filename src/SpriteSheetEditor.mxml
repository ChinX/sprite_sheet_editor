<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:panel="panel.*"
					   backgroundColor="#4D4D4D"
					   showStatusBar="false"
					   currentState="{Global.instance.currentState}"
					   windowComplete="handler_init(event)"
					   uncaughtError="handler_unCaughtError(event)"
					   closing="handler_closing(event)">
	<fx:Style source="main.css"/>
	<s:states>
		<s:State name="start" exitState="handler_exitState(event)"/>
		<s:State name="pic" exitState="handler_exitState(event)"/>
		<s:State name="swf" exitState="handler_exitState(event)"/>
		<s:State name="ss" exitState="handler_exitState(event)"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
	</s:layout>
	<panel:TopPanel id="top" borderColor="0x878787" backgroundAlpha="0" width="100%" height="40"/>
	<panel:StartPanel id="start" borderColor="0x878787" backgroundAlpha="0" width="100%" height="100%" includeIn="start" itemCreationPolicy="immediate"/>
	<panel:SwfPanel id="swf" includeIn="swf" width="100%" height="100%" itemCreationPolicy="immediate"/>
	<panel:PicPanel id="pic" includeIn="pic" width="100%" height="100%" itemCreationPolicy="immediate"/>
	<panel:SSPanel id="ss" includeIn="ss" width="100%" height="100%" itemCreationPolicy="immediate"/>
	<fx:Script>
	<![CDATA[
		import interf.IStateChanged;
		
		import mx.binding.utils.ChangeWatcher;
		import mx.events.AIREvent;
		import mx.events.FlexEvent;
		import mx.events.PropertyChangeEvent;
		import mx.states.State;
		
		import org.zengrong.utils.SOUtil;
		
		import type.StateType;
		
		import utils.Funs;
		import utils.Global;
		
		protected function handler_init(event:AIREvent):void
		{
			Global.instance.root = this;
			ChangeWatcher.watch(Global.instance, 'currentState', fun_currentStateChange);
			SOUtil.name = 'sprite_sheet_editor';
			this.title = Funs.getDesc('name') +' v' + Funs.getDesc('versionNumber');
		}
		
		private function fun_currentStateChange($evt:PropertyChangeEvent):void
		{
			var __new:String = String($evt.newValue);
			var __old:String = String($evt.oldValue);
			trace('状态改变:', __old, __new);
			for (var i:int = 0; i < this.numElements; i++) 
			{
				var __state:IStateChanged = this.getElementAt(i) as IStateChanged;
				__state.enterState(__old, __new);
				//trace('循环通知状态:', i, __state);
			}
		}
		
		protected function handler_closing($event:Event):void
		{
			$event.preventDefault();
			Funs.confirm('要关闭程序么？', 
				function():void
				{
					var __openedWindow:Array = NativeApplication.nativeApplication.openedWindows;
					for (var i:int = 0; i < __openedWindow.length; i++) 
					{
						NativeWindow(__openedWindow[i]).close();
					}
				}
			)
		}
		
		protected function handler_exitState($event:FlexEvent):void
		{
			trace('退出状态', currentState);
			for (var i:int = 0; i < this.numElements; i++) 
			{
				var __state:IStateChanged = this.getElementAt(i) as IStateChanged;
				__state.exitState();
				trace('循环通知状态:', i, __state);
			}
		}
		
		protected function handler_unCaughtError($event:UncaughtErrorEvent):void
		{
			var __str:String = '';
			if($event.error is Error)
				__str = Error($event.error).message;
			else
				__str = ErrorEvent($event.error).text;
			Funs.alert(__str);
		}
		
	]]>
	</fx:Script>
</s:WindowedApplication>
