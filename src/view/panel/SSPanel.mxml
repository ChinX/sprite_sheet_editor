<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-9 -->
<!-- 预览创建或者打开的Sprite Sheet，并对其进行编辑、优化和保存 -->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:comps="comps.*"
				   xmlns:comps1="view.comps.*">
	<fx:Declarations>
		<s:RadioButtonGroup id="frameDisplayRBG" change="updateFrameDisplay()"/>
	</fx:Declarations>
	<s:BorderContainer width="320" height="100%" borderColor="0x878787" backgroundAlpha="0" enabled="{_enabled}">
		<s:VGroup id="leftPanel" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<s:BorderContainer width="100%" backgroundColor="0x696969">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
				</s:layout>
				<s:Label text="位图动画预览" fontWeight="bold"/>
				<comps1:BMPPreview id="ani" backgroundColor="0x696969" width="100%" height="220"
								  showTransformTool="{resizeOriginCB.selected}"/>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label id="frameLabel" width="50" text="{framesAndLabels.selectedFrameNum}"/>
					<s:ToggleButton id="playBTN" label="{playBTN.selected?'暂停':'播放'}" width="100%"
									enabled="{framesAndLabels.selectedFrameIndices&amp;&amp;framesAndLabels.selectedFrameIndices.length>1}"
									click="handler_playBTNclick(event)"/>
					<s:Spacer width="100%" height="20"/>
					<s:RadioButton id="disFrameRB" width="100%" label="修剪"
								   groupName="frameDisplayRBG" selected="true"
								   toolTip="显示修剪空白后的帧的宽高"/>
					<s:RadioButton id="disOriginRB" width="100%" label="原始"
								   groupName="frameDisplayRBG"
								   toolTip="显示修剪空白前的帧的宽高，在实际的程序中会使用这个宽高。修剪空白是为了减小文件尺寸。如果文件没有进行过修剪，则原始Rect的w、h与修剪的相等。"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="center" width="100%">
					<s:CheckBox id="resizeOriginCB" label="调整帧原始大小(x,y,w,h)" enabled="{!ani.scaleContent}"
								toolTip="选择后，会缩小帧的原始大小。但你依然可以在缩小后的原始大小基础上再次执行“修剪空白”的优化。"/>
					<s:Spacer width="100%" height="20"/>
					<s:Button id="saveResizeBTN" label="保存调整"
							  toolTip="根据调整的原始大小重新计算帧大小，并立即执行优化。&#13;此操作会直接修改原始帧的大小。"
							  enabled="{!framesAndLabels.playing&amp;&amp;resizeOriginCB.selected&amp;&amp;framesAndLabels.selectedFrameIndices&amp;&amp;framesAndLabels.selectedFrameIndices.length>0}"
							  click="handler_saveResizeBTNclick(event)"/>
				</s:HGroup>
				<s:HGroup width="100%" enabled="{resizeOriginCB.selected}">
					<s:NumericStepper id="frameX" width="100%" value="@{ani.transf.x}" minimum="0" maximum="{ani.sourceWidth-1}"/>
					<s:NumericStepper id="frameY" width="100%" value="@{ani.transf.y}" minimum="0" maximum="{ani.sourceHeight-1}"/>
					<s:NumericStepper id="frameW" width="100%" value="@{ani.transf.width}" minimum="1" maximum="{ani.sourceWidth}"/>
					<s:NumericStepper id="frameH" width="100%" value="@{ani.transf.height}" minimum="1" maximum="{ani.sourceHeight}"/>
				</s:HGroup>
			</s:BorderContainer>
			<comps1:FramesAndLabels id="framesAndLabels" width="100%" backgroundColor="0x696969"
								frameAndLabelChange="handler_framesAndLabelsChange(event)"
								deleteFrame="optimizeSheet()"
								addFrame="handler_addFrame(event)"/>
			<comps1:BuildSetting id="optPanel" width="100%" backgroundColor="0x696969" 
								currentState="buildAndOpt" build="optimizeSheet();"/>
			<comps1:SaveSheetSetting id="saveSheet" width="100%" backgroundColor="0x696969"/>
			<comps1:SaveSeqSetting id="saveSeq" width="100%" backgroundColor="0x696969"
								  title="{disFrameRB.selected?'保存序列(修剪尺寸)':'保存序列(原始尺寸)'}" />
		</s:VGroup>
	</s:BorderContainer>
	<s:VScrollBar height="100%" viewport="{leftPanel}"/>
	<comps1:BMPPreview id="sheet" width="100%" height="100%"  borderColor="0x878787" backgroundAlpha="0"/>
	<fx:Script>
	<![CDATA[
		import events.SSEvent;
		
		import model.FileProcessor;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.graphics.codec.JPEGEncoder;
		import mx.graphics.codec.PNGEncoder;
		
		import org.zengrong.display.spritesheet.MaskType;
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.utils.BitmapUtil;
		import org.zengrong.utils.MathUtil;
		import org.zengrong.utils.Vec2D;
		
		import type.StateType;
		
		import utils.Funs;
		import utils.Global;
		
		import vo.SaveVO;
		
		[Bindable] private var _enabled:Boolean;
		
		public function enterState($old:String, $new:String):void
		{
			trace('SSPanel,updateOnStateChanged:', $old, $new);
			//更新调整后的Sheet
			Global.instance.adjustedSheet = Global.instance.sheet.clone();
			sheet.source = Global.instance.adjustedSheet.bitmapData;
			//sheet的name是在编辑器的图像文件处理状态中被加入的，如果没有经历过图像文件处理状态，则hasName为false
			//这里根据是否拥有name，来显示(选择)或者隐藏(不选择)nameCB，从而影响最终生成的Metadata中的name的值
			saveSheet.nameCB.visible = Global.instance.sheet.metadata.hasName;
			saveSheet.nameCB.selected =Global.instance.sheet.metadata.hasName;
			//使用当前Sheet的宽高重置WH的相关值
			optPanel.whDDL.selectedIndex = 0;
			optPanel.whNS.value = Global.instance.adjustedSheet.bitmapData.width;
			//从SpriteSheet中初始化Label和Frame
			framesAndLabels.init();
			this.addEventListener(Event.ENTER_FRAME, handler_enterFrame);
			ani.transf.init();
			_enabled = true;
		}
		
		public function exitState():void
		{
			framesAndLabels.destroy();
			sheet.destroy();
			ani.destroy();
			Global.instance.sheet.destroy();
			Global.instance.sheet = null;
			Global.instance.adjustedSheet.destroy();
			Global.instance.adjustedSheet = null;
			this.removeEventListener(Event.ENTER_FRAME, handler_enterFrame);
			ani.transf.destroy();
		}
		
		/**
		 * 更新帧显示
		 */
		private function updateFrameDisplay():void
		{
			var __frameBmd:BitmapData = null;
			if(framesAndLabels.selectedFrameIndex > -1)
			{
				//根据选择显示原始的或者修剪过的Frame
				/*
				__frameBmd = disFrameRB.selected ? 
					Global.instance.adjustedSheet.getBMDByIndex(framesAndLabels.selectedFrameIndex) : 
					Global.instance.sheet.getBMDByIndex(framesAndLabels.selectedFrameIndex);*/
				if(disFrameRB.selected)
					__frameBmd = Global.instance.adjustedSheet.getTrimBMDByIndex(framesAndLabels.selectedFrameIndex);
				else
					__frameBmd = Global.instance.adjustedSheet.getBMDByIndex(framesAndLabels.selectedFrameIndex);
				trace('更新帧：', __frameBmd.rect, disFrameRB.selected);
			}
			ani.source = __frameBmd;
		}
		
		private function getMetadata():String
		{
			if(saveSheet.jsonRB.selected)
				return JSON.stringify(Global.instance.adjustedSheet.metadata.toObject(saveSheet.simpleCB.selected, saveSheet.nameCB.selected));
			if(saveSheet.xmlRB.selected)
				return Global.instance.adjustedSheet.metadata.toXMLString(saveSheet.simpleCB.selected, saveSheet.nameCB.selected, File.lineEnding);
			return Global.instance.adjustedSheet.metadata.toTXT(saveSheet.simpleCB.selected, saveSheet.nameCB.selected, File.lineEnding);
		}
		
		/**
		 * 更新spriteSheet的metadata。在生成新的SpriteSheet前调用。
		 */
		private function updateMetadata():void
		{
			//hasName, names, namesIndex, totalFrame, frameRects, originalFrameRects 这几个变量
			//是在生成Sheet的时候填充的，因此这里不需要更新
			var __meta:SpriteSheetMetadata = Global.instance.adjustedSheet.metadata;
			__meta.type = saveSheet.sheetType;
			__meta.maskType = saveSheet.maskDDL.selectedIndex;
			var __labelMeta:Object = framesAndLabels.getLabels();
			__meta.hasLabel = __labelMeta.hasLabel;
			__meta.labels = __labelMeta.labels;
			__meta.labelsFrame = __labelMeta.labelsFrame;
		}
		
		//----------------------------------------
		// handler
		//----------------------------------------
		/**
		 * 实现帧的动画预览
		 */
		private function handler_enterFrame($evt:Event):void
		{
			if(framesAndLabels.playing)
			{
				framesAndLabels.nextFrame();
			}
		}
		
		/**
		 * Lable修改的时候更新动画预览
		 */
		protected function handler_framesAndLabelsChange($event:Event):void
		{
			updateFrameDisplay();
		}
		
		protected function handler_playBTNclick($event:MouseEvent):void
		{
			if(playBTN.selected)
				framesAndLabels.play();
			else
				framesAndLabels.pause();
			
		}
		
		/**
		 * 获取要保存的metadata和位图
		 */
		public function getAllSave():SaveVO
		{
			updateMetadata();
			var __vo:SaveVO = new SaveVO();
			var __bmd:BitmapData = getBitmapDataForSave(
				Global.instance.adjustedSheet.bitmapData,
				saveSheet.maskDDL.selectedIndex,
				optPanel.transparentCB.selected,
				optPanel.bgColorPicker.selectedColor
			);
			__vo.bitmapData = __bmd;
			__vo.metadata = getMetadata();
			__vo.picType = saveSheet.picRBG.selectedValue.toString();
			__vo.metaType = saveSheet.metaRBG.selectedValue.toString();
			__vo.type = StateType.SAVE_ALL;
			return __vo;
		}
		
		public function getMetaSave():SaveVO
		{
			updateMetadata();
			var __vo:SaveVO = new SaveVO();
			__vo.metadata = getMetadata();
			__vo.metaType = saveSheet.metaRBG.selectedValue.toString();
			__vo.type = StateType.SAVE_META;
			return __vo;
		}
		
		public function getPicSave():SaveVO
		{
			updateMetadata();
			var __vo:SaveVO = new SaveVO();
			__vo.bitmapData = getBitmapDataForSave(
				Global.instance.adjustedSheet.bitmapData,
				saveSheet.maskDDL.selectedIndex,
				optPanel.transparentCB.selected,
				optPanel.bgColorPicker.selectedColor
			);
			__vo.picType = saveSheet.picRBG.selectedValue.toString();
			__vo.quality = saveSheet.quality.value;
			__vo.type = StateType.SAVE_SHEET_PIC;
			return __vo;
		}
		
		public function getSeqSave():SaveVO
		{
			//根据显示的帧类型来保存序列
			var __bmds:Vector.<BitmapData> = disFrameRB.selected ? 
				Global.instance.adjustedSheet.getAll():
				Global.instance.sheet.getAll();
			var __vo:SaveVO = new SaveVO();
			__vo.bitmapDataList = __bmds;
			__vo.fileNameList = saveSeq.getFileNames(Global.instance.adjustedSheet.metadata.totalFrame);
			__vo.quality = (saveSeq.quality?saveSeq.quality.value:0);
			__vo.type = StateType.SAVE_SEQ;
			return __vo;
		}
		
		protected function handler_saveResizeBTNclick($event:MouseEvent):void
		{
			framesAndLabels.resizeFrames(new Rectangle(frameX.value, frameY.value,frameW.value,frameH.value));
			optimizeSheet();
			//ani.destroy();
		}
		
		protected function handler_addFrame($event:SSEvent):void
		{
			optimizeSheet();
		}
		
		//----------------------------------------
		// 内部方法
		//----------------------------------------
		/**
		 * 根据当前的选择优化Sheet，优化的信息会被写入adjustedSheet中
		 */
		private function optimizeSheet():void
		{
			ani.destroy();
			sheet.destroy();
			if(Global.instance.sheet.metadata.totalFrame==0 || Global.instance.adjustedSheet.metadata.totalFrame==0)
			{
				Funs.alert('没有帧的信息，不能生成Sheet。');
				_enabled = false;
				return;
			}
			trace('优化帧数：', Global.instance.sheet.metadata.totalFrame, Global.instance.adjustedSheet.metadata.totalFrame);
			var __list:Object = getRectsAndBmds();
			trace('新生成的：', __list.bmd, __list.frame, __list.origin)
			//保存新计算出的WH
			var __whRect:Rectangle = new Rectangle();
			//保存新计算出的每个帧在大Sheet中放置的位置
			var __newFrameRects:Vector.<Rectangle> = new Vector.<Rectangle>;
			//重新计算出最终Sheet的宽高以及修改过的frameRect
			calculateSize(	
				__list.frame, 
				__newFrameRects, 
				__whRect,
				optPanel.whDDL.selectedIndex == 0, 
				optPanel.whNS.value,
				optPanel.powerOf2CB.selected,
				optPanel.squareCB.selected
			);
			Global.instance.adjustedSheet.setFrames(__list.bmd, __newFrameRects, __list.origin, Global.instance.sheet.metadata.names);
			//绘制大Sheet位图
			var __sheetBmd:BitmapData = new BitmapData(__whRect.width, __whRect.height, optPanel.transparentCB.selected, optPanel.bgColorPicker.selectedColor);
			Global.instance.adjustedSheet.drawSheet(__sheetBmd);
			sheet.source = Global.instance.adjustedSheet.bitmapData;
			//显示优化过的Frame
			disFrameRB.selected = true;
		}
		
		/**
		 * 返回生成的原始帧rect尺寸（origin），在大sheet中的rect尺寸（frame），以及所有的BitmapData列表（bmd）
		 */
		private function getRectsAndBmds():Object
		{
			//所有的BitmapData列表
			var __bmd:Vector.<BitmapData> = null;
			//在大sheet中的rect列表
			var __frame:Vector.<Rectangle> = null;
			//原始的（在程序中使用的）rect列表
			var __origin:Vector.<Rectangle> = null; 
			if(optPanel.trimCB.selected)
			{
				__bmd = new Vector.<BitmapData>;
				__frame = new Vector.<Rectangle>;
				__origin = new Vector.<Rectangle>; 
				var __sizeRect:Rectangle = null;
				//用于保存执行trim方法后的结果
				var __trim:Object = null;
				for (var i:int=0; i < Global.instance.sheet.metadata.totalFrame; i++) 
				{
					__trim = BitmapUtil.trim(Global.instance.sheet.getBMDByIndex(i));
					__sizeRect = Global.instance.sheet.metadata.originalFrameRects[i];
					__frame[i] = __trim.rect;
					//如果重设帧的尺寸，就使用trim过后的帧的宽高建立一个新的Rect尺寸，并更新bmd
					if(optPanel.resetRectCB.selected)
					{
						__origin[i] = new Rectangle(0,0,__trim.rect.width,__trim.rect.height);
						__bmd[i] = __trim.bitmapData;
					}
					else
					{
						//如果不重设帧的尺寸，就使用原始大小的宽高。同时计算trim后的xy的偏移。
						//因为获得xy的偏移是基于与原始帧大小的正数，要将其转换为基于trim后的帧的偏移，用0减
						//不重设尺寸的情况下，不更新bmd，因为原始尺寸没变。SpriteSheet中保存的bmdList，永远都与原始尺寸相同
						__bmd = Global.instance.sheet.cloneFrames();
						__origin[i] = new Rectangle(
							0-__trim.rect.x,
							0-__trim.rect.y,
							__sizeRect.width, 
							__sizeRect.height);
					}
				}
			}
			else
			{
				//bmdlist永远都是原始尺寸的，因此不需要重新绘制
				__bmd = Global.instance.sheet.cloneFrames();
				__frame = Global.instance.sheet.metadata.frameRects.concat();
				__origin = Global.instance.sheet.metadata.originalFrameRects.concat();
				//不trim，将以前trim过的信息还原
				for (var j:int = 0; j < __frame.length; j++) 
				{
					__frame[j].width = __origin[j].width;
					__frame[j].height = __origin[j].height;
					__origin[j].x = 0;
					__origin[j].y = 0;
				}
			}
			return {frame:__frame, origin:__origin, bmd:__bmd}
		}

		/**
		 * 根据提供的Rectangle数组计算最终Sheet的宽高以及每帧在Sheet中的位置
		 * @param $frameRect 当前帧的独立大小
		 */
		private function calculateSize($frameRects:Vector.<Rectangle>, 
										$newSizeRects:Vector.<Rectangle>,
										$whRect:Rectangle, 
										$limitW:Boolean, 
										$wh:int,
										$powOf2:Boolean=false,
										$square:Boolean=false):void
		{
			if($frameRects.length==0) return;
			var __frameRect:Rectangle = $frameRects[0];
			$newSizeRects[0] = new Rectangle(0,0,__frameRect.width, __frameRect.height);
			var __rectInSheet:Rectangle = new Rectangle(0,0,__frameRect.width,__frameRect.height);
			trace('getSheetWH:', __rectInSheet, __frameRect, $whRect);
			//设置sheet的初始宽高
			if($limitW)
			{
				//若限制宽度小于帧的宽度，就扩大限制宽度
				$whRect.width = $wh;
				if($whRect.width<__frameRect.width) $whRect.width = __frameRect.width;
				//计算2的幂
				if($powOf2) $whRect.width = MathUtil.nextPowerOf2($whRect.width);
				$whRect.height = __frameRect.height;
			}
			else
			{
				$whRect.height = $wh;
				if($whRect.height<__frameRect.height) $whRect.height = __frameRect.height;
				if($powOf2) $whRect.height = MathUtil.nextPowerOf2($whRect.height);
				$whRect.width = __frameRect.width;
			}
			for (var i:int = 1; i < $frameRects.length; i++) 
			{
				__frameRect = $frameRects[i];
				Funs.updateRectInSheet(__rectInSheet, $whRect, __frameRect, $limitW);
				trace('getSheetWH:', __rectInSheet, __frameRect, $whRect);
				$newSizeRects[i] = __rectInSheet.clone();
			}
			if($square)
			{
				//计算正方形的尺寸
				if($whRect.width!=$whRect.height)
				{
					//使用当前计算出的面积开方得到正方形的基准尺寸
					var __newWH:int = Math.sqrt($whRect.width*$whRect.height);
					//使用基准尺寸重新排列一次
					calculateSize($frameRects,$newSizeRects,$whRect,$limitW,__newWH, $powOf2);
					//trace('正方形计算1:', $whRect);
					//如果基准尺寸无法实现正方形尺寸，就使用结果WH中比较大的那个尺寸作为正方形边长
					if($whRect.width!=$whRect.height)
					{
						var __max:int = Math.max($whRect.width, $whRect.height);
						$whRect.width = __max;
						$whRect.height = __max;
					}
					//trace('正方形计算2:', $whRect);
				}
			}
			if($powOf2)
			{
				$whRect.width = MathUtil.nextPowerOf2($whRect.width);
				$whRect.height = MathUtil.nextPowerOf2($whRect.height);
			}
		}
		
		/**
		 * 绘制Mask，返回带有Mask的位图（如果有mask的话）
		 */
		private function getBitmapDataForSave($bitmapData:BitmapData, $maskType:int, $transparent:Boolean, $bgcolor:uint):BitmapData
		{
			if(MaskType.useMask($maskType))
			{
				var __sourceRect:Rectangle = new Rectangle(0, 0, $bitmapData.width, $bitmapData.height);
				var __destRect:Rectangle = new Rectangle(0, 0, $bitmapData.width, $bitmapData.height);
				var __point:Point = new Point(0,0);
				//用于Alpha通道部分的背景色
				var __alphaBG:uint = 0xFF000000;
				//新建一个带有Mask大小的位图
				var __saveBmd:BitmapData = null;
				if($maskType == MaskType.HOR_MASK)
				{
					__saveBmd = new BitmapData($bitmapData.width*2, $bitmapData.height, $transparent, $bgcolor);
					__destRect.x = $bitmapData.width;
					__point.x = __destRect.x;
				}
				else if($maskType == MaskType.VER_MASK)
				{
					__saveBmd = new BitmapData($bitmapData.width, $bitmapData.height*2, $transparent, $bgcolor);
					__destRect.y = $bitmapData.height;
					__point.y = __destRect.y;
				}
				__saveBmd.copyPixels($bitmapData, __sourceRect, new Point(0,0), null, null, true);
				//为mask填充一个背景色
				__saveBmd.fillRect(__destRect, __alphaBG);
				//分别填充红绿蓝通道，这样生成出的透明的部分才是白色
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 1);
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 2);
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 4);
				return __saveBmd;
			}
			return $bitmapData;
		}
		
	]]>
	</fx:Script>
</s:HGroup>
