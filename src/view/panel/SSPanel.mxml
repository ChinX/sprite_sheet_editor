<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-9 -->
<!-- 预览创建或者打开的Sprite Sheet，并对其进行编辑、优化和保存 -->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:comps="view.comps.*">
	<s:BorderContainer id="leftPanelBG" width="320" height="100%" borderColor="0x878787" backgroundAlpha="0" enabled="false">
		<s:VGroup id="leftPanel" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<comps:SSPreview id="ssPreview" width="100%"/>
			<comps:FramesAndLabels id="framesAndLabels" width="100%" backgroundColor="0x696969"/>
			<comps:BuildSetting id="optPanel" width="100%" backgroundColor="0x696969" 
								currentState="buildAndOpt" build="optimizeSheet();"/>
			<comps:SaveSheetSetting id="saveSheet" width="100%" backgroundColor="0x696969"/>
			<comps:SaveSeqSetting id="saveSeq" width="100%" backgroundColor="0x696969"/>
		</s:VGroup>
	</s:BorderContainer>
	<s:VScrollBar height="100%" viewport="{leftPanel}"/>
	<comps:BMPPreview id="sheet" width="100%" height="100%"  borderColor="0x878787" backgroundAlpha="0"/>
	<fx:Script>
	<![CDATA[
		import events.SSEvent;
		
		import model.FileProcessor;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.graphics.codec.JPEGEncoder;
		import mx.graphics.codec.PNGEncoder;
		
		import org.zengrong.display.spritesheet.MaskType;
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.utils.BitmapUtil;
		import org.zengrong.utils.MathUtil;
		import org.zengrong.utils.Vec2D;
		
		import type.StateType;
		
		import utils.Funs;
		import utils.Global;
		
		import vo.SaveVO;
		
		public function init():void
		{
			//使用当前Sheet的宽高重置WH的相关值
			optPanel.whDDL.selectedIndex = 0;
			optPanel.whNS.value = Global.instance.adjustedSheet.bitmapData.width;
			//从SpriteSheet中初始化Label和Frame
			framesAndLabels.init();
			this.addEventListener(Event.ENTER_FRAME, handler_enterFrame);
			ssPreview.init();
		}
		
		public function destroy():void
		{
			framesAndLabels.destroy();
			sheet.destroy();
			ssPreview.destory();
			this.removeEventListener(Event.ENTER_FRAME, handler_enterFrame);
		}
		
		private function getMetadata():String
		{
			if(saveSheet.jsonRB.selected)
				return JSON.stringify(Global.instance.adjustedSheet.metadata.toObject(saveSheet.simpleCB.selected, saveSheet.nameCB.selected));
			if(saveSheet.xmlRB.selected)
				return Global.instance.adjustedSheet.metadata.toXMLString(saveSheet.simpleCB.selected, saveSheet.nameCB.selected, File.lineEnding);
			return Global.instance.adjustedSheet.metadata.toTXT(saveSheet.simpleCB.selected, saveSheet.nameCB.selected, File.lineEnding);
		}
		
		/**
		 * 更新spriteSheet的metadata。在生成新的SpriteSheet前调用。
		 */
		private function updateMetadata():void
		{
			//hasName, names, namesIndex, totalFrame, frameRects, originalFrameRects 这几个变量
			//是在生成Sheet的时候填充的，因此这里不需要更新
			var __meta:SpriteSheetMetadata = Global.instance.adjustedSheet.metadata;
			__meta.type = saveSheet.sheetType;
			__meta.maskType = saveSheet.maskDDL.selectedIndex;
			var __labelMeta:Object = framesAndLabels.getLabels();
			__meta.hasLabel = __labelMeta.hasLabel;
			__meta.labels = __labelMeta.labels;
			__meta.labelsFrame = __labelMeta.labelsFrame;
		}
		
		//----------------------------------------
		// handler
		//----------------------------------------
		/**
		 * 实现帧的动画预览
		 */
		private function handler_enterFrame($evt:Event):void
		{
			if(framesAndLabels.playing)
			{
				framesAndLabels.nextFrame();
			}
		}
		
		/**
		 * 获取要保存的metadata和位图
		 */
		public function getAllSave():SaveVO
		{
			updateMetadata();
			var __vo:SaveVO = new SaveVO();
			var __bmd:BitmapData = getBitmapDataForSave(
				Global.instance.adjustedSheet.bitmapData,
				saveSheet.maskDDL.selectedIndex,
				optPanel.transparentCB.selected,
				optPanel.bgColorPicker.selectedColor
			);
			__vo.bitmapData = __bmd;
			__vo.metadata = getMetadata();
			__vo.picType = saveSheet.picRBG.selectedValue.toString();
			__vo.metaType = saveSheet.metaRBG.selectedValue.toString();
			__vo.type = StateType.SAVE_ALL;
			return __vo;
		}
		
		public function getMetaSave():SaveVO
		{
			updateMetadata();
			var __vo:SaveVO = new SaveVO();
			__vo.metadata = getMetadata();
			__vo.metaType = saveSheet.metaRBG.selectedValue.toString();
			__vo.type = StateType.SAVE_META;
			return __vo;
		}
		
		public function getPicSave():SaveVO
		{
			updateMetadata();
			var __vo:SaveVO = new SaveVO();
			__vo.bitmapData = getBitmapDataForSave(
				Global.instance.adjustedSheet.bitmapData,
				saveSheet.maskDDL.selectedIndex,
				optPanel.transparentCB.selected,
				optPanel.bgColorPicker.selectedColor
			);
			__vo.picType = saveSheet.picRBG.selectedValue.toString();
			__vo.quality = saveSheet.quality.value;
			__vo.type = StateType.SAVE_SHEET_PIC;
			return __vo;
		}
		
		public function getSeqSave():SaveVO
		{
			var __vo:SaveVO = new SaveVO();
			__vo.fileNameList = saveSeq.getFileNames(Global.instance.adjustedSheet.metadata.totalFrame);
			__vo.quality = (saveSeq.quality?saveSeq.quality.value:0);
			__vo.type = StateType.SAVE_SEQ;
			return __vo;
		}
		
		//----------------------------------------
		// 内部方法
		//----------------------------------------
		
		/**
		 * 绘制Mask，返回带有Mask的位图（如果有mask的话）
		 */
		private function getBitmapDataForSave($bitmapData:BitmapData, $maskType:int, $transparent:Boolean, $bgcolor:uint):BitmapData
		{
			if(MaskType.useMask($maskType))
			{
				var __sourceRect:Rectangle = new Rectangle(0, 0, $bitmapData.width, $bitmapData.height);
				var __destRect:Rectangle = new Rectangle(0, 0, $bitmapData.width, $bitmapData.height);
				var __point:Point = new Point(0,0);
				//用于Alpha通道部分的背景色
				var __alphaBG:uint = 0xFF000000;
				//新建一个带有Mask大小的位图
				var __saveBmd:BitmapData = null;
				if($maskType == MaskType.HOR_MASK)
				{
					__saveBmd = new BitmapData($bitmapData.width*2, $bitmapData.height, $transparent, $bgcolor);
					__destRect.x = $bitmapData.width;
					__point.x = __destRect.x;
				}
				else if($maskType == MaskType.VER_MASK)
				{
					__saveBmd = new BitmapData($bitmapData.width, $bitmapData.height*2, $transparent, $bgcolor);
					__destRect.y = $bitmapData.height;
					__point.y = __destRect.y;
				}
				__saveBmd.copyPixels($bitmapData, __sourceRect, new Point(0,0), null, null, true);
				//为mask填充一个背景色
				__saveBmd.fillRect(__destRect, __alphaBG);
				//分别填充红绿蓝通道，这样生成出的透明的部分才是白色
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 1);
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 2);
				__saveBmd.copyChannel($bitmapData, __sourceRect, __point, 8, 4);
				return __saveBmd;
			}
			return $bitmapData;
		}
		
	]]>
	</fx:Script>
</s:HGroup>
