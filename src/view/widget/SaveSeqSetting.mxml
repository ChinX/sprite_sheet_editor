<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:widget="view.widget.*"
		  xmlns:comps="view.comps.*">
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
	</s:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="frameCropDisplayRBG" />
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="saveSeq", type="events.SSEvent")]
	</fx:Metadata>
	<s:VGroup width="100%">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label>
				<s:text>{FxGettext.gettext("File name:")}</s:text>
			</s:Label>
			<s:TextInput id="fileNameTI" width="100%" change="preview()" text="frame_##" maxChars="30"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label >
				<s:text>{FxGettext.gettext("Start at:")}</s:text>
			</s:Label>
			<s:NumericStepper id="startNS" minimum="0" maximum="999999" maxChars="6" stepSize="1" valueFormatFunction="intFun" width="100%" change="preview()"/>
		</s:HGroup>
	</s:VGroup>
	<s:HGroup verticalAlign="middle">
		<s:Label>
			<s:text>{FxGettext.gettext("File name preview:")}</s:text>
		</s:Label>
		<s:Label text='{_fileName}' width="100%"/>
	</s:HGroup>
	<s:HGroup>
		<s:RadioButton id="disCropRB" width="100%"
					   groupName="frameCropDisplayRBG" selected="true" value="true" >
			<s:label>{FxGettext.gettext("trimmed size")}</s:label>
			<s:toolTip>{FxGettext.gettext("Display width and height of trimmed frame.")}</s:toolTip>
		</s:RadioButton>
		<s:RadioButton id="disOriginRB" width="100%"
					   groupName="frameCropDisplayRBG" value="false">
			<s:label>{FxGettext.gettext("original size")}</s:label>
			<s:toolTip>{FxGettext.gettext("Display the width and height of trimmed. In order to reduce file size, we could trim the blank. If the file does not trim, the original size and the trimmed size is same.")}</s:toolTip>
		</s:RadioButton>
	</s:HGroup>
	<fx:Script>
	<![CDATA[
		import events.SSEvent;
		
		import gnu.as3.gettext.FxGettext;
		import org.zengrong.assets.AssetsType;
		
		import utils.Funs;
		
		//用作数字占位符
		private static const PLACEHOLDER:String = "#";
		
		private var _ten:Array=[0];	//编号位数中每一位的十进制最小值，例如10，1000，1000
		[Bindable] private var _fileName:String;	//主文件名
		
		private var _imageType:String;
		
		public function get imageType():String
		{
			return _imageType;
		}
		
		public function set imageType(value:String):void
		{
			_imageType = value;
			preview();
		}

		private function intFun($value:Number):String
		{
			return String(int($value));
		}
		
		/**
		 * 根据提供的文件数量返回符合命名规则的文件名数组
		 */
		public function getFileNames($fileNum:int):Vector.<String>
		{
			var __names:Vector.<String> = new Vector.<String>($fileNum, true);
			for (var i:int = 0; i < $fileNum; i++) 
			{
				__names[i] = getFileName(startNS.value+i);
			}
			return __names;
		}
		

		private function preview():void
		{
			_fileName = getFileName(startNS.value);
		}
		
		/**
		 * 返回文件名的字符串形式(不包含扩展名)，数字部分不足位数的补0
		 */
		private function getFileName($num:int):String
		{
			var __str:String = fileNameTI.text;
			//有几个占位符
			var __holderNum:int = __str.split(PLACEHOLDER).length - 1;
			if(__holderNum<=0)
			{
				Funs.alert(FxGettext.gettext("Please input at least a # mark in the field!"));
				return FxGettext.gettext("N/A");
			}
			else if(__holderNum > 6)
			{
				Funs.alert(FxGettext.gettext("The largest number is 6!"));
				return FxGettext.gettext("N/A");
			}
			//更新每位的最大值的数组
			_ten = [];
			var __holderValue:String = PLACEHOLDER;
			for(var i:int=1;i<__holderNum;i++)
			{
				_ten.push(Math.pow(10, i));
				__holderValue += PLACEHOLDER;
			}
			var __numStr:String = $num.toString();
			for(var j:int=0; j<_ten.length; j++)
			{
				//位数不够的数字补0
				if($num<_ten[j])
					__numStr = '0' + __numStr;
			}
			return __str.replace(__holderValue, __numStr) + "." + _imageType;
		}
		
	]]>
	</fx:Script>
</s:NavigatorContent>
