<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-17 -->
<!-- 管理帧和Label -->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  currentState="{labelCB.selected?'frameAndLabel':'frame'}" xmlns:comps="view.comps.*" minHeight="420" >
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
	</s:layout>
	<fx:Metadata>
		[Event(name="frameAndLabelChange", type="events.SSEvent")]
	</fx:Metadata>
	<s:states>
		<s:State id="frameState" name="frame" enterState="handler_frameEnterState(event)" />
		<s:State id="labelState" name="frameAndLabel" enterState="handler_labelEnterState(event)" />
	</s:states>
	<s:Label id="frameLabel" fontWeight="bold" text="{labelList.selectedItem?('LABEL('+labelList.selectedItem.name+')中的帧:'+frameAC.length):'所有可用帧:'+frameAC.length}"/>
	<s:HGroup id="addGRP" verticalAlign="middle" width="100%">
		<s:Button id="addSSBTN" width="100%" label="增加SpriteSheet"
				  toolTip="添加一个或多个SpriteSheet到当前Sheet的末尾。规则如下：&#13;1.所有帧会增加到当前Sheet的末尾；&#13;2.若label重名，则被导入Sheet中的label不导入，但依然会导入该lable的所有帧；&#13;3.若name重名，则被导入的Sheet中该name对应的重名帧不会被导入；&#13;4.若原始Sheet中包含name，但被导入Sheet中不含name，则会自动为被导入的Sheet中的所有帧命名。"/>
		<s:Button id="addPicBTN" width="100%" label="增加图像帧"
				  toolTip="添加多个图像文件。每个图像作为一帧增加到当前Sheet的末尾。"/>
	</s:HGroup>
	<s:HGroup id="naviGRP" verticalAlign="middle" width="100%">
		<s:Button id="delBTN" label="删帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing}" 
				  toolTip="从帧列表中删除一帧。删除后会立即更新Sheet。"/>
		<s:Button id="prevBTN" label="上帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing&amp;&amp;frameDG.selectedIndex>0}" 
				  click="prevFrame();"/>
		<s:Button id="nextBTN" label="下帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing&amp;&amp;frameDG.selectedIndex&lt;frameAC.length-1}" 
				  click="nextFrame();"/>
		<s:Button id="allBTN" width="100%" label="全选" enabled="{frameAC&amp;&amp;frameAC.length>0}"
				  click="handler_allBTNclick(event)"/>
	</s:HGroup>
	<s:DataGrid id="frameDG" width="100%" height="100%" minHeight="200" dataProvider="{frameAC}"
				selectionMode="multipleRows" sortableColumns="false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="帧号" width="40" dataField="frameNum"/>
				<s:GridColumn headerText="名称" width="60" dataField="frameName"/>
				<s:GridColumn headerText="修剪尺寸" dataField="frameSize"/>
				<s:GridColumn headerText="原始尺寸" dataField="originSize"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:CheckBox id="labelCB" label="使用Label"/>
		<s:TextInput id="labelInput" includeIn="frameAndLabel" width="100%"
					 text="{labelList.selectedItem.label}"
					 toolTip="label格式：英文+数字"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel" itemCreationPolicy="immediate">
		<s:Button id="addLabelBTN" width="100%" label="加Label"
				  enabled="{frameDG.selectedItem &amp;&amp; labelInput.text}" toolTip="添加一个Label到列表中"/>
		<s:Button id="removeLabelBTN" width="100%" label="删Label"
				  enabled="{labelList.selectedItem}"
				  toolTip="删除选中的Label"/>
		<s:Button id="renameBTN" width="100%" label="改Label" 
				  enabled="{labelInput.text&amp;&amp;labelList.selectedItem}" toolTip="修改Label名称"/>
		<s:Button id="cancelBTN" width="100%" label="取消选择" enabled="{labelList.selectedItem}" 
				  click="labelList.selectedIndex=-1;"/>
	</s:HGroup>
	<s:List id="labelList" width="100%" height="100%" minHeight="150" labelField="name" includeIn="frameAndLabel" itemCreationPolicy="immediate"/>
	<comps:VDividedButton id="dividedHeightBTN" mouseDown="handler_dividedHeightDown(event)"/>
	<fx:Script>
	<![CDATA[
		import events.SSEvent;
		
		import model.FileProcessor;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.IList;
		import mx.events.FlexEvent;
		
		import org.zengrong.assets.Assets;
		import org.zengrong.assets.AssetsEvent;
		import org.zengrong.assets.AssetsProgressVO;
		import org.zengrong.assets.AssetsType;
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.display.spritesheet.SpriteSheetMetadataType;
		
		import spark.collections.Sort;
		import spark.collections.SortField;
		import spark.events.IndexChangeEvent;
		
		import utils.Funs;
		import utils.Global;
		
		import vo.FrameVO;
		import vo.LabelListVO;
		import vo.LabelVO;
		
		[Bindable] public var frameAC:ArrayCollection;
		[Bindable] public var playing:Boolean;	//是否正在播放动画。如果是播放动画状态，那么valueCommit的时候，就不更新selectedFrameIndices的值
		
		//frameDG中选择的索引
		[Bindable] public var selectedFrameIndices:Vector.<int>;

		/**
		 * 当前正在播放的帧在selectedFrameIndices中的索引
		 */
		private var _currentIndex:int=-1;
		
		public function init():void
		{
			this.addEventListener(Event.ENTER_FRAME, handler_enterFrame);
		}
		
		public function destroy():void
		{
			this.removeEventListener(Event.ENTER_FRAME, handler_enterFrame);
			trace('FrameAndLabels.destroy');
			if(frameAC)	frameAC.removeAll();
			frameAC = null;
			pause();
		}
		
		public function get selectedFrameIndex():int
		{
			if(frameDG.selectedItem)
				return FrameVO(frameDG.selectedItem).frameNum;
			return -1;
		}

		
		public function play():void
		{
			playing = true;
			_currentIndex = 0;
		}
		
		public function pause():void
		{
			playing = false;
			_currentIndex = -1;
		}
		
		public function prevFrame():void
		{
			if(frameDG.selectedIndex > 0)
				frameDG.selectedIndex --;
		}
		
		public function nextFrame():void
		{
			trace('nextFrame:', playing, frameDG.selectedIndex, selectedFrameIndices);
			if(playing)
			{
				frameDG.selectedIndex = selectedFrameIndices[_currentIndex];
				if(_currentIndex == -1 || _currentIndex == selectedFrameIndices.length-1)
					_currentIndex = 0;
				else
					_currentIndex ++;
			}
			else
			{
				if(frameDG.selectedIndex < frameAC.length-1)
					frameDG.selectedIndex ++;
				else
					frameDG.selectedIndex = frameAC.length-1;
			}
			
		}
		

		//----------------------------------------
		// 内部方法
		//----------------------------------------

		
		/**
		 * 将帧信息中保存的大于$frameNum的帧的索引减1
		 */
		public function refreshFrameNum($list:IList, $frameNum:int):void
		{
			trace('refreshFrameNum:', $list.length, $frameNum);
			//删除了1帧，就要将帧信息中保存的大于此帧索引的帧的索引减1
			for (var i:int = 0; i < $list.length; i++) 
			{
				var __item:FrameVO = $list.getItemAt(i) as FrameVO;
				if(__item.frameNum>$frameNum)
				{
					__item.frameNum --;
					$list.setItemAt(__item, i);
				}
			}
		}
		
		//----------------------------------------
		// handler
		//----------------------------------------
		/**
		 * 实现帧的动画预览
		 */
		private function handler_enterFrame($evt:Event):void
		{
			if(playing)
			{
				nextFrame();
			}
		}
		
		protected function handler_allBTNclick($event:MouseEvent):void
		{
			var __indics:Vector.<int> = new Vector.<int>;
			for (var i:int = 0; i < frameAC.length; i++) 
			{
				__indics[i] = i;
			}
			frameDG.selectedIndices = __indics;
		}
		
		protected function handler_dividedHeightDown($evt:MouseEvent):void
		{
			this.parent.addEventListener(MouseEvent.MOUSE_MOVE, handler_resizeHeight);
			this.parent.addEventListener(MouseEvent.MOUSE_UP, handler_mouseUp);
			this.parent.addEventListener(MouseEvent.RELEASE_OUTSIDE, handler_mouseUp);
		}
		
		private function handler_resizeHeight($evt:MouseEvent):void
		{
//			trace('contentGrpoup:',this.contentGroup.height);
//			trace(this.mouseY, _minHeight, this.height);
			if(this.height< this.minHeight)
			{
				this.height = this.minHeight;
				handler_mouseUp(null);
				return;
			}
			this.height = this.mouseY+10;
		}
		
		private function handler_mouseUp($evt:MouseEvent):void
		{
			this.parent.removeEventListener(MouseEvent.MOUSE_MOVE, handler_resizeHeight);
			this.parent.removeEventListener(MouseEvent.MOUSE_UP, handler_mouseUp);
			this.parent.removeEventListener(MouseEvent.RELEASE_OUTSIDE, handler_mouseUp);
		}
		
		protected function handler_labelEnterState($evt:FlexEvent):void
		{
			this.minHeight = 640;
			//更新容器实际高度
			this.addEventListener(FlexEvent.UPDATE_COMPLETE, handler_updateComp);
		}
		
		protected function handler_frameEnterState($evt:FlexEvent):void
		{
			this.minHeight = 440;
		}
		
		protected function handler_updateComp($evt:FlexEvent):void
		{
			//trace('updateComp:', this.contentGroup.height, this.height);
			//若不更新，可能会出现容器内容被遮挡的情况
			if(this.height < this.contentGroup.height) this.height = this.contentGroup.height;
			this.removeEventListener(FlexEvent.UPDATE_COMPLETE, handler_updateComp);
		}
	]]>
	</fx:Script>
</s:BorderContainer>
