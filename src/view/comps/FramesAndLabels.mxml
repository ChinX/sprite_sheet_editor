<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-17 -->
<!-- 管理帧和Label -->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  currentState="{labelCB.selected?'frameAndLabel':'frame'}">
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
	</s:layout>
	<fx:Metadata>
		[Event(name="deleteFrame", type="events.SSEvent")]
		[Event(name="frameAndLabelChange", type="events.SSEvent")]
		[Event(name="addFrameToSS", type="events.SSEvent")]
		[Event(name="selectedFrameIndicesChange", type="events.SSEvent")]
		[Event(name="select", type="flash.events.Event")]
	</fx:Metadata>
	<s:states>
		<s:State name="frame"/>
		<s:State name="frameAndLabel"/>
	</s:states>
	<s:Label id="frameLabel" fontWeight="bold" text="{labelList.selectedItem?('LABEL('+labelList.selectedItem.name+')中的帧:'+frameAC.length):'所有可用帧:'+frameAC.length}"/>
	<s:HGroup verticalAlign="middle" width="100%">
		<s:Button id="addSSBTN" width="100%" label="增加SpriteSheet"
				  click="handler_addClick(event)"
				  toolTip="添加一个或多个SpriteSheet到当前Sheet的末尾。规则如下：&#13;1.所有帧会增加到当前Sheet的末尾；&#13;2.若label重名，则被导入Sheet中的label不导入，但依然会导入该lable的所有帧；&#13;3.若name重名，则被导入的Sheet中该name对应的重名帧不会被导入；&#13;4.若原始Sheet中包含name，但被导入Sheet中不含name，则会自动为被导入的Sheet中的所有帧命名。"/>
		<s:Button id="addPicBTN" width="100%" label="增加图像帧"
				  click="handler_addClick(event)"
				  toolTip="添加多个图像文件。每个图像作为一帧增加到当前Sheet的末尾。"/>
	</s:HGroup>
	<s:HGroup verticalAlign="middle" width="100%">
		<s:Button id="delBTN" label="删帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing}" 
				  click="handler_delBTNclick(event)"
				  toolTip="从帧列表中删除一帧。删除后会立即更新Sheet。"/>
		<s:Button id="prevBTN" label="上帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing&amp;&amp;frameDG.selectedIndex>0}" 
				  click="prevFrame();"/>
		<s:Button id="nextBTN" label="下帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing&amp;&amp;frameDG.selectedIndex&lt;frameAC.length-1}" 
				  click="nextFrame();"/>
		<s:Button id="allBTN" width="100%" label="全选" enabled="{frameAC&amp;&amp;frameAC.length>0}"
				  click="handler_allBTNclick(event)"/>
	</s:HGroup>
	<s:DataGrid id="frameDG" width="100%" height="200" dataProvider="{frameAC}"
				selectionMode="multipleRows" sortableColumns="false"
				valueCommit="handler_frameDGValueCommit(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="帧号" width="40" dataField="frameNum"/>
				<s:GridColumn headerText="名称" width="60" dataField="frameName"/>
				<s:GridColumn headerText="修剪尺寸" dataField="frameSize"/>
				<s:GridColumn headerText="原始尺寸" dataField="originSize"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:CheckBox id="labelCB" label="使用Label"/>
		<s:TextInput id="labelInput" includeIn="frameAndLabel" width="100%"
					 text="{labelList.selectedItem.label}"
					 toolTip="label格式：英文+数字"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel">
		<s:Button id="addLabelBTN" width="100%" label="加Label"
				  click="handler_addLabelBTNclick(event)"
				  enabled="{frameDG.selectedItem &amp;&amp; labelInput.text}" toolTip="添加一个Label到列表中"/>
		<s:Button id="removeLabelBTN" width="100%" label="删Label"
				  click="handler_removeLabelBTNclick(event)" enabled="{labelList.selectedItem}"
				  toolTip="删除选中的Label"/>
		<s:Button id="renameBTN" width="100%" label="改Label" 
				  click="handler_renameBTNclick(event)"
				  enabled="{labelInput.text&amp;&amp;labelList.selectedItem}" toolTip="修改Label名称"/>
		<s:Button id="cancelBTN" width="100%" label="取消选择" enabled="{labelList.selectedItem}" 
				  click="labelList.selectedIndex=-1;"/>
	</s:HGroup>
	<s:List id="labelList" width="100%" height="150" dataProvider="{labelAL}"
			valueCommit="handler_labelListvalueComit(event)" labelField="name" includeIn="frameAndLabel" itemCreationPolicy="immediate"/>
	<fx:Script>
	<![CDATA[
		import events.SSEvent;
		
		import model.FileProcessor;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.IList;
		import mx.events.FlexEvent;
		
		import org.zengrong.assets.Assets;
		import org.zengrong.assets.AssetsEvent;
		import org.zengrong.assets.AssetsProgressVO;
		import org.zengrong.assets.AssetsType;
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.display.spritesheet.SpriteSheetMetadataType;
		import org.zengrong.events.InfoEvent;
		
		import spark.collections.Sort;
		import spark.collections.SortField;
		import spark.events.IndexChangeEvent;
		
		import utils.Funs;
		import utils.Global;
		
		import vo.FrameVO;
		import vo.LabelVO;

		
		[Bindable] public var labelAL:ArrayList;
		[Bindable] public var frameAC:ArrayCollection;
		[Bindable] public var selectedFrameNum:int;		//当前选择的帧编号
		[Bindable] public var selectedFrameIndices:Vector.<int>;	//frameDG中选择的索引
		[Bindable] public var playing:Boolean;	//是否正在播放动画。如果是播放动画状态，那么valueCommit的时候，就不更新selectedFrameIndices的值
		
		
		/**
		 * 用来载入新加入的帧或者SpriteSheet
		 */
		private var _assets:Assets;
		
		/**
		 * 加入帧的方式，true代表加入的是SpriteSheet，否则是普通图像
		 */
		private var _isAddSSFrame:Boolean;
		
		/**
		 * 使用_assets每载入一个文件，这个索引加一
		 */
		private var _loadAssetsIndex:int=0;
		
		/**
		 * 保存不在Label中的所有帧
		 */
		private var _framesNotInLabels:ArrayCollection;
		
		/**
		 * 当前正在播放的帧在selectedFrameIndices中的索引
		 */
		private var _currentIndex:int=-1;
		
		public function get selectedFrameIndex():int
		{
			if(frameDG.selectedItem)
				return FrameVO(frameDG.selectedItem).frameNum;
			return -1;
		}
		
		public function init():void
		{
			var __meta:SpriteSheetMetadata = Global.instance.adjustedSheet.metadata;
			_framesNotInLabels = new ArrayCollection();
			var __frame:FrameVO = null;
			var i:int=0;
			for (i = 0; i < __meta.totalFrame; i++) 
			{
				__frame = new FrameVO();
				__frame.frameNum = i;
				__frame.frameName = __meta.hasName? __meta.names[i]:null;
				__frame.frameRect = __meta.frameRects[i];
				__frame.originRect = __meta.originalFrameRects[i];
				_framesNotInLabels.addItem(__frame);
			}
			
			labelAL = new ArrayList();
			labelCB.selected = __meta.hasLabel;
			if(__meta.hasLabel)
			{
				var __label:String = '';
				var __framesIndex:Array = null;
				var __framesInLabel:ArrayList = null;
				//建立Label后，要从frameAL列表中删除的帧的索引（因为这些帧被加入到labelAL中了）
				var __toDelFrames:Array = [];
				for (i = 0; i < __meta.labels.length; i++) 
				{
					__label = __meta.labels[i];
					__framesIndex = __meta.labelsFrame[__label];
					__framesInLabel = new ArrayList();
					for (var k:int = 0; k < __framesIndex.length; k++) 
					{
						__framesInLabel.addItem(_framesNotInLabels.getItemAt(__framesIndex[k]));
						__toDelFrames.push(__framesIndex[k]);
					}
					labelAL.addItem(new LabelVO(__label, __framesInLabel));
				}
				//从最后一个要删除的帧开始删除（这样就不会影响到_framesNotInLabels的顺序，确保删除的成功）
				__toDelFrames.sort(Array.NUMERIC);
				while(__toDelFrames.length>0)
					_framesNotInLabels.removeItemAt(__toDelFrames.pop());
			}
			//如果当前有不在Label中的帧，就显示它们
			if(_framesNotInLabels.length>0)
			{
				selectedFrameIndices = new Vector.<int>;
				for (var j:int = 0; j < _framesNotInLabels.length; j++) 
				{
					selectedFrameIndices[j] = j;
				}
				refreshFrameDG();
				trace('init:', selectedFrameIndices);
				frameDG.selectedIndices = selectedFrameIndices;
				selectFrameChange();
			}
			initAssets();
		}
		
		private function initAssets():void
		{
			if(!_assets)
			{
				_assets = new Assets();
				_assets.addEventListener(AssetsEvent.COMPLETE, handler_assetsComp);
				_assets.addEventListener(AssetsEvent.PROGRESS, handler_assetsProgress);
			}
		}
		
		public function destroy():void
		{
			trace('FrameAndLabels.destroy');
			if(labelAL)	labelAL.removeAll();
			labelAL = null;
			if(frameAC)	frameAC.removeAll();
			frameAC = null;
			if(_framesNotInLabels) _framesNotInLabels.removeAll();
			_framesNotInLabels = null;
			selectedFrameIndices = null;
			selectFrameChange();
			pause();
			if(_assets)
			{
				_assets.removeEventListener(AssetsEvent.PROGRESS, handler_assetsProgress);
				_assets.removeEventListener(AssetsEvent.COMPLETE, handler_assetsComp);
				_assets = null;
			}
		}
		
		public function play():void
		{
			playing = true;
			_currentIndex = 0;
		}
		
		public function pause():void
		{
			playing = false;
			_currentIndex = -1;
		}
		
		public function prevFrame():void
		{
			if(frameDG.selectedIndex > 0)
				frameDG.selectedIndex --;
		}
		
		public function nextFrame():void
		{
			trace('nextFrame:', playing, frameDG.selectedIndex, selectedFrameIndices);
			if(playing)
			{
				frameDG.selectedIndex = selectedFrameIndices[_currentIndex];
				if(_currentIndex == -1 || _currentIndex == selectedFrameIndices.length-1)
					_currentIndex = 0;
				else
					_currentIndex ++;
			}
			else
			{
				if(frameDG.selectedIndex < frameAC.length-1)
					frameDG.selectedIndex ++;
				else
					frameDG.selectedIndex = frameAC.length-1;
			}
			
		}
		
		/**
		 * 获取metadata中需要的label数据
		 */
		public function getLabels():Object
		{
			var __hasLabel:Boolean = labelCB.selected && labelAL.length>0;
			if(__hasLabel)
			{
				var __labels:Vector.<String> = new Vector.<String>(labelAL.length, true);
				var __labelsFrame:Object = {};
				var __labelItem:LabelVO = null;
				for (var i:int = 0; i < labelAL.length; i++) 
				{
					__labelItem = labelAL.getItemAt(i) as LabelVO;
					__labels[i] = __labelItem.name;
					__labelsFrame[__labelItem.name] = __labelItem.getFramesIndex();
				}
				return {hasLabel:__hasLabel, labels:__labels, labelsFrame:__labelsFrame};
			}
			return {hasLabel:__hasLabel};
		}
		
		/**
		 * 修改选择的帧的初始大小，同时直接重新绘制该帧的bitmapData
		 */
		public function resizeFrames($rect:Rectangle):void
		{
			if(selectedFrameIndices)
			{
				var __frame:FrameVO = null;
				var __bmd:BitmapData = null;
				var __point:Point = new Point(0,0);
				var __frameNum:int = 0;
				for (var i:int = 0; i < selectedFrameIndices.length; i++) 
				{
					__bmd = new BitmapData($rect.width, $rect.height, true, 0x00000000);
					__frame = frameAC.getItemAt(selectedFrameIndices[i]) as FrameVO;
					//设置frameVO中保存的两个rect的值，frameVO中的两个rect是从adjustedSheet获取而来，而且使用的是引用，因此同时修改了Global中的adjustedSheet的值
					__frame.frameRect.width = $rect.width;
					__frame.frameRect.height = $rect.height;
					__frame.originRect.x = 0;
					__frame.originRect.y = 0;
					__frame.originRect.width = $rect.width;
					__frame.originRect.height = $rect.height;
					//根据调整的大小重新绘制当前帧的bmd
					__bmd.copyPixels(Global.instance.sheet.getBMDByIndex(__frame.frameNum), $rect, __point, null, null, true);
					//设置adjustedSheet中的bmd，由于已经修改了两个rect的值，这里就不需要再重置rect
					Global.instance.adjustedSheet.addFrameAt(__frame.frameNum, __bmd);
					//设置sheet中的bmd，同时设置两个rect
					Global.instance.sheet.addFrameAt(__frame.frameNum,__bmd.clone(), __frame.frameRect.clone(), __frame.originRect.clone());
					frameAC.refresh();
				}
			}
		}
		//----------------------------------------
		// 内部方法
		//----------------------------------------
		
		private function selectFrameChange():void
		{
			this.dispatchEvent(new SSEvent(SSEvent.SELECTED_FRAMEINDICES_CHANGE, selectedFrameIndices));
		}
		
		/**
		 * 将帧信息中保存的大于$frameNum的帧的索引减1
		 */
		private function refreshFrameNum($list:IList, $frameNum:int):void
		{
			trace('refreshFrameNum:', $list.length, $frameNum);
			//删除了1帧，就要将帧信息中保存的大于此帧索引的帧的索引减1
			for (var i:int = 0; i < $list.length; i++) 
			{
				var __item:FrameVO = $list.getItemAt(i) as FrameVO;
				if(__item.frameNum>$frameNum)
				{
					__item.frameNum --;
					$list.setItemAt(__item, i);
				}
			}
		}
		
		/**
		 * 根据选择情况刷新frameDG的显示
		 */
		private function refreshFrameDG():void
		{
			var i:int=0;
			if(!_framesNotInLabels.sort)
			{
				_framesNotInLabels.sort = new Sort();
				_framesNotInLabels.sort.fields = [new SortField('frameNum', false, true)];
			}
			_framesNotInLabels.refresh();
			frameAC = new ArrayCollection();
			//若选择的是label，就显示该Label中的所有帧
			if(labelCB.selected && labelList.selectedIndex != -1)
			{
				var __framesInLabel:ArrayList = LabelVO(labelList.selectedItem).frames;
				frameAC.addAll(__framesInLabel);
				var __indices:Vector.<int> = new Vector.<int>;
				for (var j:int = 0; j < __framesInLabel.length; j++) 
				{
					__indices[j] = j;
				}
				frameDG.selectedIndices = __indices;
			}
			//否则显示不在Label中的所有帧
			else
			{
				frameAC.addAll(_framesNotInLabels);
				frameDG.selectedIndex = -1;
			}
		}
		
		/**
		 * 选择加入的图像文件后，调用的方法
		 */
		public function fun_addToSS($filelist:Array):void
		{
			var __fileList:Array = $filelist;
			var __file:File = null;
			var __urls:Array = [];
			var __urlobj:Object = null;
			for(var i:int=0;i<__fileList.length;i++)
			{
				__file = __fileList[i] as File;
				__urlobj = {url:__file.url};
				__urlobj.ftype = __file.extension;
				if(_isAddSSFrame)
				{
					__urlobj.ftype = AssetsType.SPRITE_SHEET;
					__urlobj.mtype = SpriteSheetMetadataType.XML;
				}
				__urls.push(__urlobj);
			}
			_assets.load(__urls);
		}
		
		/**
		 * 将选择的SpriteSheet加入到Sheet中
		 */
		private function addSSToSheet($vo:AssetsProgressVO):void
		{
			var __ss:SpriteSheet = _assets.getSpriteSheet($vo.name);
			//当前Sheet的总帧数
			var __sheetTotal:int = Global.instance.sheet.metadata.totalFrame;
			//当前Sheet的最后一帧的Rect
			var __lastFrameRect:Rectangle = Global.instance.sheet.metadata.frameRects[__sheetTotal-1];
			//加入的sheet的总帧数
			var __addSheetTotal:int = __ss.metadata.totalFrame;
			var __rect:Rectangle = null;
			var __origRect:Rectangle = null;
			var __bmd:BitmapData = null;
			var __frame:FrameVO = null;
			var __name:String = null;
			//所有帧的信息数组，保存起来，后面方便处理Label
			var __frameVOs:Vector.<FrameVO> = new Vector.<FrameVO>;
			for(var i:int=0;i<__addSheetTotal;i++)
			{
				__rect = __ss.metadata.frameRects[i].clone();
				//将加入的Sheet的所有帧的位置都放到当前Sheet的最后一行换行后的位置
				__rect.y += __lastFrameRect.bottom;
				__origRect = __ss.metadata.originalFrameRects[i].clone();
				__bmd = __ss.getBMDByIndex(i);
				
				__frame = new FrameVO();
				__frame.frameNum = __sheetTotal + i;
				__frame.frameRect = __rect;
				__frame.originRect = __origRect;
				
				//如果新加入的sheet有name，就直接使用。这里不必判断Sheet是否使用name，先加进来，最后用不用是保存时候的事情。
				if(__ss.metadata.hasName)
					__frame.frameName = __ss.metadata.names[i];
				//否则就自动根据资源名称和当前索引生成name
				else
					__frame.frameName = $vo.name + '_' + i;
				__name = __frame.frameName;
				__frameVOs[i] = __frame;
				Global.instance.sheet.addFrame(__bmd, __rect, __origRect, __name);
			}
			//如果加入的Sheet包含Label，就使用它
			if(__ss.metadata.hasLabel)
			{
				//让当前的SpriteSheet支持Label，使用adjustedSheet即可
				Global.instance.adjustedSheet.metadata.hasLabel = true;
				//打开Label面板
				labelCB.selected = true;
				var __labelList:Array = null;
				var __newLabelList:Array = null;
				var __labelFrameAL:ArrayList = null;
				//保存加入的Sheet中Label中某一帧的索引，这个索引值是原始的，没有加入当前Sheet总帧数的值
				var __frameNum:int = 0;
				for(var __labelName:String in __ss.metadata.labelsFrame)
				{
					__labelList = __ss.metadata.labelsFrame[__labelName];
					var __curSheetLabelsFrame:Object = Global.instance.adjustedSheet.metadata.labelsFrame;
					
					//如果当前的Sheet包含Label，且新的Label中有与当前Label重名的，就不加入同名Label
					if(__curSheetLabelsFrame && (__labelName in __curSheetLabelsFrame)) continue;
					__newLabelList = [];
					__labelFrameAL = new ArrayList();
					//旧的label的index索引，要加上原始的sheet的总帧数，因为帧是加到末尾的
					for(var k:int=0;k<__labelList.length;k++)
					{
						__frameNum = __labelList[k];
						__newLabelList[k] = __frameNum+__sheetTotal;
						//从所有帧列表中删除当前Label中所属的帧，加入到Label列表
						__labelFrameAL.addItem(__frameVOs[__frameNum]);
						__frameVOs[__frameNum] = null;
					}
					labelAL.addItem(new LabelVO(__labelName, __labelFrameAL));
				}
			}
			
			//将不在Label中的Frame，以及Label出现重名的Frame都加入_framesNotInLabels列表
			for(var l:int=0;l<__frameVOs.length;l++)
			{
				__frame = __frameVOs[l];
				if(__frame != null) _framesNotInLabels.addItem(__frame);
			}
		}
		
		/**
		 * 将选择的图像加入到Sheet中
		 */
		private function addPicToSheet($vo:AssetsProgressVO):void
		{
			var __bmd:BitmapData = _assets.getBitmapData($vo.name);
			var __total:int = Global.instance.sheet.metadata.totalFrame;
			//基于最后一帧的rect位置，横向移动rect
			var __rect:Rectangle = Global.instance.sheet.metadata.frameRects[__total-1].clone();
			__rect.x += __rect.width;
			__rect.width = __bmd.width;
			__rect.height = __bmd.height;
			//原始的rect，不裁切
			var __origRect:Rectangle = new Rectangle(0,0,__bmd.width, __bmd.height);
			//加入帧列表
			var __frame:FrameVO = new FrameVO();
			__frame.frameNum = __total;
			__frame.frameName = $vo.name;
			__frame.frameRect = __rect;
			__frame.originRect = __origRect;
			_framesNotInLabels.addItem(__frame);
			Global.instance.sheet.addFrame(__bmd, __rect, __origRect, __frame.frameName);
		}
		//----------------------------------------
		// handler
		//----------------------------------------
		protected function handler_addClick($evt:MouseEvent):void
		{
			_isAddSSFrame = ($evt.currentTarget == addSSBTN);
			this.dispatchEvent(new Event(Event.SELECT));
		}
		
		/**
		 * 载入一个图像文件成功后，将其加入spritesheet中
		 */
		private function handler_assetsProgress($evt:InfoEvent):void
		{
			var __vo:AssetsProgressVO = $evt.info as AssetsProgressVO;
			if(__vo.whole && __vo.done)
			{
				trace('FrameAndLabels.handler_assetsProgress:',__vo.toString());
				if(_isAddSSFrame)
					addSSToSheet(__vo);
				else
					addPicToSheet(__vo);
			}
		}
		
		private function handler_assetsComp($evt:InfoEvent):void
		{
			//labelList.selectedIndex = labelAL.length - 1;
			refreshFrameDG();
			this.dispatchEvent(new SSEvent(SSEvent.ADD_FRAME_TO_SS));
		}
		
		protected function handler_frameDGValueCommit($event:FlexEvent):void
		{
			//只有不在播放状态，才更新选择的帧列表
			if(!playing)
			{
				selectedFrameIndices = frameDG.selectedIndices.concat();
				//获取到的Vector是降序的，倒转它
				selectedFrameIndices.sort(Array.NUMERIC);
				trace('更新indices:', selectedFrameIndices);
				selectFrameChange();
			}
			selectedFrameNum = frameDG.selectedIndex==-1?-1:FrameVO(frameDG.selectedItem).frameNum;
			trace('dgValueCommit:', selectedFrameNum, addLabelBTN);
			dispatchEvent(new SSEvent(SSEvent.FRAME_AND_LABEL_CHANGE));
		}
		
		protected function handler_labelListvalueComit($event:FlexEvent):void
		{
			refreshFrameDG();
			trace('handler_labelListvalueComit:', selectedFrameNum, addLabelBTN);
		}
		
		protected function handler_addLabelBTNclick($event:MouseEvent):void
		{
			//trace(frameDG.selectedIndex, frameDG.selectedItem, frameDG.selectedItems);
			if(!frameDG.selectedItem)
			{
				Funs.alert('请先选择帧！');
				addLabelBTN.enabled = false;
				return;
			}
			for (var i:int = 0; i < labelAL.length; i++) 
			{
				if(LabelVO(labelAL.getItemAt(i)).name == labelInput.text)
				{
					Funs.alert('Label不允许重复！');
					return;
				}
			}
			var __framesInLabel:Vector.<FrameVO> =  Vector.<FrameVO>(frameDG.selectedItems.concat());
			__framesInLabel.sort(function($a:FrameVO, $b:FrameVO):int
				{
					return $a.frameNum - $b.frameNum;
				}
			);
			var __al:ArrayList = new ArrayList();
			while(__framesInLabel.length>0)
			{
				var __item:FrameVO = __framesInLabel.shift() as FrameVO;
				__al.addItem(__item);
				trace('向Label添加帧：', __item.frameNum);
				//删除_framesNotInLabels中的帧，ArrayCollection没有removeItem，真杯具
				var __itemIndex:int = _framesNotInLabels.getItemIndex(__item);
				_framesNotInLabels.removeItemAt(__itemIndex);
			}
			labelAL.addItem(new LabelVO(labelInput.text, __al));
			labelList.selectedIndex = labelAL.length - 1;
			refreshFrameDG();
		}
		
		protected function handler_removeLabelBTNclick($event:MouseEvent):void
		{
			var __item:LabelVO = labelList.selectedItem as LabelVO;
			for (var i:int = 0; i < __item.frames.length; i++) 
			{
				var __frame:FrameVO = __item.frames.getItemAt(i) as FrameVO;
				_framesNotInLabels.addItem(__frame);
			}
			labelAL.removeItem(__item);
			refreshFrameDG();
		}
		
		protected function handler_renameBTNclick($event:MouseEvent):void
		{
			var __item:Object = labelAL.getItemAt(labelList.selectedIndex);
			__item.name = labelInput.text;
			labelAL.setItemAt(__item, labelList.selectedIndex);
		}

		protected function handler_delBTNclick($event:MouseEvent):void
		{
			nextBTN.enabled = false;
			prevBTN.enabled = false;
			if(!frameDG.selectedItem)
			{
				//spark的组件怎么这么多绑定bug TNND……
				Funs.alert('请先选择要删除的帧。');
				delBTN.enabled = false;
				return;
			}
			while(selectedFrameIndices.length>0)
			{
				var __delItem:FrameVO = frameAC.getItemAt(selectedFrameIndices.pop()) as FrameVO;
				Global.instance.sheet.removeFrameAt(__delItem.frameNum);
				Global.instance.adjustedSheet.removeFrameAt(__delItem.frameNum);
				trace('删除Sheet与adjustedSheet中的帧，删除后：', Global.instance.sheet.metadata.totalFrame, Global.instance.adjustedSheet.metadata.totalFrame);
				//若选择了Label，在labelVO中删除
				if(labelCB.selected && labelList.selectedIndex!=-1)
				{
					//删除labelVO中的当前帧
					LabelVO(labelList.selectedItem).frames.removeItem(__delItem);
				}
				//如果没有选择label，就在_frameNotInLabels中删除
				else
				{
					var __index:int = _framesNotInLabels.getItemIndex(__delItem);
					_framesNotInLabels.removeItemAt(__index);
				}
				//修改所有label中的帧的编号
				for(var i:int=0;i<labelAL.length;i++)
				{
					var __labelItem:LabelVO = labelAL.getItemAt(i) as LabelVO;
					refreshFrameNum(__labelItem.frames, __delItem.frameNum);
				}
				//修改不在label中的帧的编号
				refreshFrameNum(_framesNotInLabels, __delItem.frameNum);
			}
			selectedFrameIndices = null;
			selectFrameChange();
			//刷新frameDG的显示
			refreshFrameDG();
			//通知SSPanel已经删除了帧，SSPanel根据需求重新生成
			this.dispatchEvent(new SSEvent(SSEvent.DELETE_FRAME));
		}
		
		protected function handler_allBTNclick($event:MouseEvent):void
		{
			var __indics:Vector.<int> = new Vector.<int>;
			for (var i:int = 0; i < frameAC.length; i++) 
			{
				__indics[i] = i;
			}
			frameDG.selectedIndices = __indics;
		}
	]]>
	</fx:Script>
</s:BorderContainer>
