<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-17 -->
<!-- 修改时间：2012-11-22 -->
<!-- 管理帧和Label -->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  currentState="{labelCB.selected?'frameAndLabel':'frame'}" xmlns:comps="view.comps.*" minHeight="420" >
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
	</s:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="frameCropDisplayRBG" />
		<s:RadioButtonGroup id="frameOrLabelRBG" />
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="frameAndLabelChange", type="events.SSEvent")]
	</fx:Metadata>
	<s:states>
		<s:State id="frameState" name="frame" enterState="handler_frameEnterState(event)" />
		<s:State id="labelState" name="frameAndLabel" enterState="handler_labelEnterState(event)" />
	</s:states>
	
	<!-- 预览窗口相关的界面 -->
	<s:HGroup width="100%">
		<s:Button id="openPreviewBTN" label="打开预览窗口" height="40" enabled="{frameDG.selectedItem}"/>
		<s:Spacer width="100%" height="40"/>
		<s:VGroup id="frameOrLabelGRP" width="80">
			<s:RadioButton id="useFrameRB" width="100%" label="使用帧"
						   groupName="frameOrLabelRBG" selected="true" value="true"
						   toolTip="播放选中的帧的动画"/>
			<s:RadioButton id="useLabelRB" width="100%" label="使用Label"
						   groupName="frameOrLabelRBG" value="false"
						   toolTip="播放选中的Label的动画"/>
		</s:VGroup>
		<s:VGroup width="100%" enabled="{frameDG.selectedItem}">
			<s:RadioButton id="disCropRB" width="100%" label="修剪"
						   groupName="frameCropDisplayRBG" selected="true" value="true"
						   toolTip="显示修剪空白后的帧的宽高"/>
			<s:RadioButton id="disOriginRB" width="100%" label="原始"
						   groupName="frameCropDisplayRBG" value="false"
						   toolTip="显示修剪空白前的帧的宽高，在实际的程序中会使用这个宽高。修剪空白是为了减小文件尺寸。如果文件没有进行过修剪，则原始Rect的w、h与修剪的相等。"/>
		</s:VGroup>
	</s:HGroup>
	
	<!-- 以下是帧相关的界面 -->
	<s:Label id="frameLabel" fontWeight="bold" text="{frameDG.dataProvider?'所有可用帧:'+frameDG.dataProvider.length:'没有可用的帧'}"/>
	<s:HGroup id="addGRP" verticalAlign="middle" width="100%">
		<s:Button id="addSSBTN" width="100%" label="增加SpriteSheet"
				  toolTip="添加一个或多个SpriteSheet到当前Sheet的末尾。规则如下：&#13;1.所有帧会增加到当前Sheet的末尾；&#13;2.若label重名，则被导入Sheet中的label不导入，但依然会导入该lable的所有帧；&#13;3.若name重名，则被导入的Sheet中该name对应的重名帧不会被导入；&#13;4.若原始Sheet中包含name，但被导入Sheet中不含name，则会自动为被导入的Sheet中的所有帧命名。"/>
		<s:Button id="addPicBTN" width="100%" label="增加图像帧"
				  toolTip="添加多个图像文件。每个图像作为一帧增加到当前Sheet的末尾。"/>
	</s:HGroup>
	<s:HGroup id="naviGRP" verticalAlign="middle" width="100%">
		<s:Button id="delFrameBTN" label="删帧" width="100%" 
				  toolTip="从帧列表中删除一帧。删除后会立即更新Sheet。"/>
		<s:Button id="selectAllFrameBTN" width="100%" label="全选" 
				  click="handler_allBTNclick(event)"/>
		<s:Button id="upFrameBTN" label="上移" toolTip="移动帧的位置，移动后帧的编号也会发生变化。" />
		<s:Button id="downFrameBTN" label="下移" toolTip="移动帧的位置，移动后帧的编号也会发生变化。" />
	</s:HGroup>
	<comps:FrameDataGrid id="frameDG"  minHeight="200" dataProvider="{frameDG.dataProvider}" selectionMode="multipleRows" />
	
	<!-- 下面是Label相关的界面 -->
	<s:HGroup width="100%" verticalAlign="middle">
		<s:CheckBox id="labelCB" label="使用Label"/>
		<s:DropDownList id="labelDDL" includeIn="frameAndLabel" width="100%" labelField="name" itemCreationPolicy="immediate" requireSelection="true"
						enabled="{labelDDL.dataProvider &amp;&amp;labelDDL.dataProvider.length>0}" />
		<s:TextInput id="labelNameInput" prompt="输入Label" toolTip="label格式：英文+数字" width="100" includeIn="frameAndLabel" />
	</s:HGroup>
	<s:Label id="labelLabel" fontWeight="bold" text="{labelDDL.selectedItem?('LABEL('+labelDDL.selectedItem.name+')中的帧:'+frameInLabelDG.dataProvider.length):'没有选择Label'}" includeIn="frameAndLabel"/>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel" itemCreationPolicy="immediate">
		<s:Button id="addLabelBTN" width="100%" label="加Label"
				  enabled="{frameDG.selectedItem &amp;&amp; labelNameInput.text}" toolTip="添加一个Label到列表中"/>
		<s:Button id="removeLabelBTN" width="100%" label="删Label"
				  enabled="{labelDDL.selectedItem}"
				  toolTip="删除选中的Label"/>
		<s:Button id="renameBTN" width="100%" label="改Label" 
				  enabled="{labelDDL.selectedItem &amp;&amp; labelNameInput.text &amp;&amp; labelNameInput.text != labelDDL.selectedItem.name}" toolTip="修改Label名称"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel" itemCreationPolicy="immediate">
		<s:Button id="addFrameToLabelBTN" label="加入帧" click="handler_addFrameToLabelBTNClick(event)"/>
		<s:Button id="removeFrameFromLabelBTN" label="移除帧" click="handler_removeFrameFromLabelBTNClick(event)"/>
		<s:Button id="upFrameInLabelBTN" label="上移" click="handler_upFrameInLabelBTNClick(event)"/>
		<s:Button id="downFrameInLabelBTN" label="下移" click="handler_downFrameInLabelBTNClick(event)"/>
	</s:HGroup>
	<comps:FrameDataGrid id="frameInLabelDG" minHeight="150" includeIn="frameAndLabel" itemCreationPolicy="immediate"/>
	
	<!-- 用于改变高度的按钮 -->
	<comps:VDividedButton id="dividedHeightBTN" mouseDown="handler_dividedHeightDown(event)"/>
	<fx:Script>
	<![CDATA[
		import events.SSEvent;
		
		import model.FileProcessor;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.IList;
		import mx.core.DragSource;
		import mx.core.SpriteAsset;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.managers.DragManager;
		import mx.skins.halo.DefaultDragImage;
		
		import org.zengrong.assets.Assets;
		import org.zengrong.assets.AssetsEvent;
		import org.zengrong.assets.AssetsProgressVO;
		import org.zengrong.assets.AssetsType;
		import org.zengrong.display.spritesheet.SpriteSheet;
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		import org.zengrong.display.spritesheet.SpriteSheetMetadataType;
		
		import spark.collections.Sort;
		import spark.collections.SortField;
		import spark.events.GridEvent;
		import spark.events.IndexChangeEvent;
		
		import utils.Funs;
		import utils.Global;
		
		import vo.FrameVO;
		import vo.LabelListVO;
		import vo.LabelVO;
		
		[Bindable] public var playing:Boolean;	//是否正在播放动画。如果是播放动画状态，那么valueCommit的时候，就不更新selectedFrameIndices的值
		
		//frameDG中选择的索引
		[Bindable] public var selectedFrameIndices:Vector.<int>;
		
		/**
		 * 当前正在播放的帧在selectedFrameIndices中的索引
		 */
		private var _currentIndex:int=-1;
		
		public function init():void
		{
			this.addEventListener(Event.ENTER_FRAME, handler_enterFrame);
		}
		
		public function refreshFrame():void
		{
			ArrayCollection(frameDG.dataProvider).refresh();
		}
		
		public function getFrameItemAt($index:int):FrameVO
		{
			return frameDG.dataProvider.getItemAt($index) as FrameVO;
		}
		
		public function destroy():void
		{
			this.removeEventListener(Event.ENTER_FRAME, handler_enterFrame);
			trace('FrameAndLabels.destroy');
			if(frameDG.dataProvider) frameDG.dataProvider.removeAll();
			frameDG.dataProvider = null;
		}
		
		public function get selectedLabelList():ArrayList
		{
			if(labelDDL.selectedItem)
				return LabelVO(labelDDL.selectedItem).frames;
			return null;
		}
		
		public function get selectedFrameIndex():int
		{
			if(frameDG.selectedItem)
				return FrameVO(frameDG.selectedItem).frameNum;
			return -1;
		}
		
		public function get selectedFrameInLabelIndex():int
		{
			if(frameInLabelDG.selectedItem)
				return FrameVO(frameInLabelDG.selectedItem).frameNum;
			return -1;
		}
		
		/**
		 * 根据单击的位置找到帧列表中的对应帧
		 */
		public function findFrameByPoint($point:Point):void
		{
			if(playing) return;
			if(frameDG.dataProvider && frameDG.dataProvider.length>0)
			{
				var __frame:FrameVO;
				for (var i:int = 0; i < frameDG.dataProvider.length; i++) 
				{
					__frame = getFrameItemAt(i);
					if(__frame.frameRect.containsPoint($point))
					{
						frameDG.selectedIndex = i;
						return;
					}
				}
			}
		}

		public function play($play:Boolean):void
		{
			playing = $play;
			_currentIndex = playing ? 0 : -1;
		}
		
		private function nextFrame():void
		{
			trace('nextFrame:', playing, frameDG.selectedIndex, selectedFrameIndices);
	
			if(frameOrLabelRBG.selectedValue)
			{
				frameDG.selectedIndex = selectedFrameIndices[_currentIndex];
				if(_currentIndex == -1 || _currentIndex == selectedFrameIndices.length-1)
					_currentIndex = 0;
				else
					_currentIndex ++;
			}
			else
			{
				frameInLabelDG.selectedIndex = _currentIndex;
				if(_currentIndex == -1 || _currentIndex == frameInLabelDG.dataProvider.length-1)
					_currentIndex = 0;
				else
					_currentIndex ++;
				
			}
		}
		

		
		//----------------------------------------
		// handler
		//----------------------------------------
		/**
		 * 实现帧的动画预览
		 */
		private function handler_enterFrame($evt:Event):void
		{
			if(playing)
			{
				nextFrame();
			}
		}
		
		protected function handler_allBTNclick($event:MouseEvent):void
		{
			var __indics:Vector.<int> = new Vector.<int>;
			for (var i:int = 0; i < frameDG.dataProvider.length; i++) 
			{
				__indics[i] = i;
			}
			frameDG.selectedIndices = __indics;
		}
		
		protected function handler_dividedHeightDown($evt:MouseEvent):void
		{
			this.parent.addEventListener(MouseEvent.MOUSE_MOVE, handler_resizeHeight);
			this.parent.addEventListener(MouseEvent.MOUSE_UP, handler_mouseUp);
			this.parent.addEventListener(MouseEvent.RELEASE_OUTSIDE, handler_mouseUp);
		}
		
		private function handler_resizeHeight($evt:MouseEvent):void
		{
//			trace('contentGrpoup:',this.contentGroup.height);
//			trace(this.mouseY, _minHeight, this.height);
			if(this.height< this.minHeight)
			{
				this.height = this.minHeight;
				handler_mouseUp(null);
				return;
			}
			this.height = this.mouseY+10;
		}
		
		private function handler_mouseUp($evt:MouseEvent):void
		{
			this.parent.removeEventListener(MouseEvent.MOUSE_MOVE, handler_resizeHeight);
			this.parent.removeEventListener(MouseEvent.MOUSE_UP, handler_mouseUp);
			this.parent.removeEventListener(MouseEvent.RELEASE_OUTSIDE, handler_mouseUp);
		}
		
		protected function handler_labelEnterState($evt:FlexEvent):void
		{
			this.minHeight = 640;
			//更新容器实际高度
			this.addEventListener(FlexEvent.UPDATE_COMPLETE, handler_updateComp);
			//更新一次frame管理按钮的状态
			updateFrameBTNS();
			//更新一次Label管理按钮的状态
			updateFrameInLabelBTNS();
			//更新一次帧的状态
			updateFrameOrLabelGRP();
		}
		
		protected function handler_frameEnterState($evt:FlexEvent):void
		{
			this.minHeight = 440;
			updateFrameBTNS();
			updateFrameOrLabelGRP();
		}
		
		protected function handler_updateComp($evt:FlexEvent):void
		{
			//trace('updateComp:', this.contentGroup.height, this.height);
			//若不更新，可能会出现容器内容被遮挡的情况
			if(this.height < this.contentGroup.height) this.height = this.contentGroup.height;
			this.removeEventListener(FlexEvent.UPDATE_COMPLETE, handler_updateComp);
		}
		
		//有可用Label的时候，才允许选择Frame或者Label显示
		public function updateFrameOrLabelGRP():void
		{
			var __enabled:Boolean = labelCB.selected && labelDDL.selectedItem;
			 frameOrLabelGRP.enabled= __enabled;
			 //不可选择的时候，返回默认选项
			 if(!__enabled) frameOrLabelRBG.selectedValue = true;
		}
		
		/**
		 * 更新与Frame相关的按钮状态
		 */
		public function updateFrameBTNS():void
		{
			//选中的帧中包含顶部或者底部帧的时候，禁止上移或者下移
			var __indices:Vector.<int> = frameDG.selectedIndices;
			if(__indices.length > 0)
			{
				var __inTop:Boolean = false;
				var __inBottom:Boolean = false;
				for (var i:int = 0; i < __indices.length; i++) 
				{
					if(__indices[i] == 0)
						__inTop = true;
					if(__indices[i] == frameDG.dataProvider.length-1)
						__inBottom = true;
				}
				upFrameBTN.enabled = !__inTop;
				downFrameBTN.enabled = !__inBottom;
				delFrameBTN.enabled = !playing;
				//允许加入帧到label中
				addFrameToLabelBTN.enabled = labelCB.selected && labelDDL.selectedItem;
			}
			else
			{
				upFrameBTN.enabled = false;
				downFrameBTN.enabled = false;
				delFrameBTN.enabled = false;
				addFrameToLabelBTN.enabled = false;
			}
			selectAllFrameBTN.enabled = frameDG.dataProviderLength > 0;
		}
		
		public function updateFrameInLabelBTNS():void
		{
			var __index:int = frameInLabelDG.selectedIndex;
			if(__index > -1)
			{
				removeFrameFromLabelBTN.enabled = true;
				upFrameInLabelBTN.enabled = __index > 0;
				downFrameInLabelBTN.enabled = __index < (frameInLabelDG.dataProvider.length - 1);
			}
			else
			{
				removeFrameFromLabelBTN.enabled = false;
				upFrameInLabelBTN.enabled = false;
				downFrameInLabelBTN.enabled = false;
			}
		}
		
		//向上移动label中的帧
		private function handler_upFrameInLabelBTNClick($evt:MouseEvent):void
		{
			var __oldIndex:int = frameInLabelDG.selectedIndex;
			var __framesInLabel:ArrayList = selectedLabelList;
			__framesInLabel.addItemAt(__framesInLabel.removeItemAt(__oldIndex), __oldIndex-1);
			refreshFrame();
			frameInLabelDG.selectedIndex = __oldIndex -1;
			updateFrameInLabelBTNS();
		}
		
		//向下移动label中的帧
		private function handler_downFrameInLabelBTNClick($evt:MouseEvent):void
		{
			var __oldIndex:int = frameInLabelDG.selectedIndex;
			var __framesInLabel:ArrayList = selectedLabelList;
			__framesInLabel.addItemAt(__framesInLabel.removeItemAt(__oldIndex), __oldIndex+1);
			frameInLabelDG.selectedIndex = __oldIndex +1;
			updateFrameInLabelBTNS();
		}
		
		//从label中移除帧
		private function handler_removeFrameFromLabelBTNClick($evt:MouseEvent):void
		{
			var __frames:ArrayList = selectedLabelList;
			var __delItem:FrameVO = __frames.getItemAt(frameInLabelDG.selectedIndex) as FrameVO;
			__frames.removeItem(__delItem);
			updateFrameInLabelBTNS();
		}
		
		//向label中添加帧
		private function handler_addFrameToLabelBTNClick($evt:MouseEvent):void
		{
			var __frames:Vector.<Object> = frameDG.selectedItems;
			var __framesInLabel:ArrayList = selectedLabelList;
			for each(var __frame:FrameVO in __frames)
			{
				__framesInLabel.addItem(__frame);
			}
			updateFrameBTNS();
			updateFrameInLabelBTNS();
		}
	]]>
	</fx:Script>
</s:BorderContainer>
