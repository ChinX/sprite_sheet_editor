<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-17 -->
<!-- 修改时间：2012-11-22 -->
<!-- 管理帧和Label -->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  currentState="{labelCB.selected?'frameAndLabel':'frame'}" xmlns:comps="view.comps.*" minHeight="420" >
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
	</s:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="frameCropDisplayRBG" />
		<s:RadioButtonGroup id="frameOrLabelRBG" />
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="frameAndLabelChange", type="events.SSEvent")]
	</fx:Metadata>
	<s:states>
		<s:State id="frameState" name="frame" enterState="handler_frameEnterState(event)" />
		<s:State id="labelState" name="frameAndLabel" enterState="handler_labelEnterState(event)" />
	</s:states>
	<!-- 预览窗口相关的界面 -->
	<s:Button id="openPreviewBTN" height="40" enabled="{frameDG.selectedItem}">
		<s:label>{FxGettext.gettext("Open preview windows")}</s:label>
	</s:Button>
	<s:HGroup width="100%">
		<s:VGroup id="frameOrLabelGRP" width="100%">
			<s:RadioButton id="useFrameRB" width="100%"
						   groupName="frameOrLabelRBG" selected="true" value="true">
				<s:label>{FxGettext.gettext("Use frame")}</s:label>
				<s:toolTip>{FxGettext.gettext("Play the animation of selected frames")}</s:toolTip>
			</s:RadioButton>
			<s:RadioButton id="useLabelRB" width="100%"
						   groupName="frameOrLabelRBG" value="false">
				<s:label>{FxGettext.gettext("Use label")}</s:label>
				<s:toolTip>{FxGettext.gettext("Play the animation of selected label")}</s:toolTip>
			</s:RadioButton>
		</s:VGroup>
		<s:VGroup width="100%" enabled="{frameDG.selectedItem}">
			<s:RadioButton id="disCropRB" width="100%"
						   groupName="frameCropDisplayRBG" selected="true" value="true" >
				<s:label>{FxGettext.gettext("Trim")}</s:label>
				<s:toolTip>{FxGettext.gettext("Display width and height of trimmed frame.")}</s:toolTip>
			</s:RadioButton>
			<s:RadioButton id="disOriginRB" width="100%"
						   groupName="frameCropDisplayRBG" value="false">
				<s:label>{FxGettext.gettext("Original")}</s:label>
				<s:toolTip>{FxGettext.gettext("Display the width and height of trimmed. In order to reduce file size, we could trim the blank. If the file does not trim, the original size and the trimmed size is same.")}</s:toolTip>
			</s:RadioButton>
		</s:VGroup>
	</s:HGroup>
	<!-- 以下是帧相关的界面 -->
	<s:Label id="frameLabel" fontWeight="bold">
		<s:text>{frameDG.dataProvider?FxGettext.gettext("All available frames:")+frameDG.dataProvider.length:FxGettext.gettext("The frames are not available.")}</s:text>
	</s:Label>
	<s:HGroup id="addGRP" verticalAlign="middle" width="100%">
		<s:Button id="addSSBTN" width="100%">
				<s:label>{FxGettext.gettext("Add Sprite Sheet")}</s:label>
				<s:toolTip>{FxGettext.gettext("Add one or more Sprite Sheet to the end of the current Sprite Sheet. The rules are as follows:\n1. All frames will be added to the Sprite Sheet at the end of current;\n2. If the label is the same name, the label in the Sprite Sheet do not import, but all frames in the label will be imported;\n3. If the name is the same name, the name in the Sprite Sheet do not import;\n4. If original Sprite Sheet contains frame name, but imported Sprite Sheet does not, all frame in the Sprite Sheet will be automatically named.")}</s:toolTip>
		</s:Button>
		<s:Button id="addPicBTN" width="100%" >
				<s:label>{FxGettext.gettext("Add image frame")}</s:label>
				<s:toolTip>{FxGettext.gettext("Add multiple image file. One frame added to the end of the current Sprite Sheet as a frame.")}</s:toolTip>
		</s:Button>
	</s:HGroup>
	<s:HGroup id="naviGRP1" verticalAlign="middle" width="100%">
		<s:Button id="delFrameBTN" width="100%">
				<s:label>{FxGettext.gettext("Remove frame")}</s:label>
				<s:toolTip>{FxGettext.gettext("Remove a frame from the list. Update the Sprite Sheet immediately.")}</s:toolTip>
		</s:Button>
		<s:Button id="selectAllFrameBTN" width="100%" click="handler_allBTNclick(event)">
				<s:label>{FxGettext.gettext("Selecte all")}</s:label>
		</s:Button>
	</s:HGroup>
	<s:HGroup id="naviGRP2" verticalAlign="middle" width="100%">
		<s:Button id="upFrameBTN" width="100%">
			<s:label>{FxGettext.gettext("Move up")}</s:label>
			<s:toolTip>{FxGettext.gettext("Move the frame's position, the frmae Numbers will change after moving.")}</s:toolTip>
		</s:Button>
		<s:Button id="downFrameBTN" width="100%">
			<s:label>{FxGettext.gettext("Move down")}</s:label>
			<s:toolTip>{FxGettext.gettext("Move the frame's position, the frmae Numbers will change after moving.")}</s:toolTip>
		</s:Button>
	</s:HGroup>
	<comps:FrameDataGrid id="frameDG"  minHeight="200" selectionMode="multipleRows" />
	
	<!-- 下面是Label相关的界面 -->
	<s:HGroup width="100%" verticalAlign="middle">
		<s:CheckBox id="labelCB">
			<s:label>{FxGettext.gettext("use label")}</s:label>
		</s:CheckBox>
		<s:DropDownList id="labelDDL" includeIn="frameAndLabel" width="100%" labelField="name" itemCreationPolicy="immediate" requireSelection="true"
						enabled="{labelDDL.dataProvider &amp;&amp;labelDDL.dataProvider.length>0}" />
	</s:HGroup>
	<s:TextInput id="labelNameInput" width="100%" includeIn="frameAndLabel">
		<s:prompt>{FxGettext.gettext("Enter label")}</s:prompt>
		<s:toolTip>{FxGettext.gettext("Label format: letters + Numbers")}</s:toolTip>
	</s:TextInput>
	<s:Label id="labelLabel" fontWeight="bold" includeIn="frameAndLabel">
		<s:text>{labelDDL.selectedItem ? ("LABEL("+labelDDL.selectedItem.name+"),"+FxGettext.gettext("Number of frame:") + frameInLabelDG.dataProvider.length) : FxGettext.gettext("No selected label")}</s:text>
	</s:Label>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel" itemCreationPolicy="immediate">
		<s:Button id="addLabelBTN" width="100%"
				  enabled="{frameDG.selectedItem &amp;&amp; labelNameInput.text}">
			<s:label>{FxGettext.gettext("Add label")}</s:label>
			<s:toolTip>{FxGettext.gettext("Add a label to the list.")}</s:toolTip>
		</s:Button>
		<s:Button id="removeLabelBTN" width="100%"
				  enabled="{labelDDL.selectedItem}">
			<s:label>{FxGettext.gettext("Remove label")}</s:label>
			<s:toolTip>{FxGettext.gettext("Remove the selected label")}</s:toolTip>
		</s:Button>
		<s:Button id="renameBTN" width="100%"
				  enabled="{labelDDL.selectedItem &amp;&amp; labelNameInput.text &amp;&amp; labelNameInput.text != labelDDL.selectedItem.name}">
			<s:label>{FxGettext.gettext("Modify label")}</s:label>
		</s:Button>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel" itemCreationPolicy="immediate">
		<s:Button id="addFrameToLabelBTN" click="handler_addFrameToLabelBTNClick(event)" width="100%">
			<s:label>{FxGettext.gettext("Add frame")}</s:label>
		</s:Button>
		<s:Button id="removeFrameFromLabelBTN" click="handler_removeFrameFromLabelBTNClick(event)" width="100%">
			<s:label>{FxGettext.gettext("Remove frame")}</s:label>
		</s:Button>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel" itemCreationPolicy="immediate">
		<s:Button id="upFrameInLabelBTN" click="handler_upFrameInLabelBTNClick(event)" width="100%">
			<s:label>{FxGettext.gettext("Move up")}</s:label>
		</s:Button>
		<s:Button id="downFrameInLabelBTN" click="handler_downFrameInLabelBTNClick(event)" width="100%">
			<s:label>{FxGettext.gettext("Move down")}</s:label>
		</s:Button>
		
	</s:HGroup>
	<comps:FrameDataGrid id="frameInLabelDG" minHeight="150" includeIn="frameAndLabel" itemCreationPolicy="immediate"/>
	
	<!-- 用于改变高度的按钮 -->
	<comps:VDividedButton id="dividedHeightBTN" mouseDown="handler_dividedHeightDown(event)"/>
	<fx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.IList;
		import mx.events.FlexEvent;
		
		import events.SSEvent;
		
		import gnu.as3.gettext.FxGettext;
		
		import vo.FrameVO;
		import vo.LabelVO;
		
		public function init():void
		{
		}
		
		public function get framesData():IList
		{
			return frameDG.dataProvider;
		}
		
		public function set framesData($list:IList):void
		{
			frameDG.dataProvider = $list;
		}
		
		public function get framesAndLabelData():IList
		{
			return frameInLabelDG.dataProvider;
		}
		
		public function set framesAndLabelData($list:IList):void
		{
			frameInLabelDG.dataProvider = $list;
		}
		
		public function refreshFrame():void
		{
			ArrayCollection(framesData).refresh();
		}
		
		public function getFrameItemAt($index:int):FrameVO
		{
			return framesData.getItemAt($index) as FrameVO;
		}
		
		public function destroy():void
		{
			trace('FrameAndLabels.destroy');
			if(framesData) framesData.removeAll();
			framesData = null;
			if(framesAndLabelData) framesAndLabelData.removeAll();
			framesAndLabelData = null;
		}
		
		public function get selectedLabelFrameList():ArrayList
		{
			if(labelDDL.selectedItem)
				return LabelVO(labelDDL.selectedItem).frames;
			return null;
		}
		
		public function get selectedFrameIndex():int
		{
			if(frameDG.selectedItem)
				return FrameVO(frameDG.selectedItem).frameNum;
			return -1;
		}
		
		public function get selectedFrameInLabelIndex():int
		{
			if(frameInLabelDG.selectedItem)
				return FrameVO(frameInLabelDG.selectedItem).frameNum;
			return -1;
		}
		
		public function get selectedLabel():LabelVO
		{
			if(labelDDL.selectedItem) return labelDDL.selectedItem as LabelVO;
			return null;
		}
		
		/**
		 * 根据单击的位置找到帧列表中的对应帧
		 */
		public function findFrameByPoint($point:Point):void
		{
			if(frameDG.dataProvider && frameDG.dataProvider.length>0)
			{
				var __frame:FrameVO;
				for (var i:int = 0; i < frameDG.dataProvider.length; i++) 
				{
					__frame = getFrameItemAt(i);
					if(__frame.frameRect.containsPoint($point))
					{
						frameDG.selectedIndex = i;
						return;
					}
				}
			}
		}

		//----------------------------------------
		// handler
		//----------------------------------------
		protected function handler_allBTNclick($event:MouseEvent):void
		{
			var __indics:Vector.<int> = new Vector.<int>;
			for (var i:int = 0; i < frameDG.dataProvider.length; i++) 
			{
				__indics[i] = i;
			}
			frameDG.selectedIndices = __indics;
		}
		
		protected function handler_dividedHeightDown($evt:MouseEvent):void
		{
			this.parent.addEventListener(MouseEvent.MOUSE_MOVE, handler_resizeHeight);
			this.parent.addEventListener(MouseEvent.MOUSE_UP, handler_mouseUp);
			this.parent.addEventListener(MouseEvent.RELEASE_OUTSIDE, handler_mouseUp);
		}
		
		private function handler_resizeHeight($evt:MouseEvent):void
		{
//			trace('contentGrpoup:',this.contentGroup.height);
//			trace(this.mouseY, _minHeight, this.height);
			if(this.height< this.minHeight)
			{
				this.height = this.minHeight;
				handler_mouseUp(null);
				return;
			}
			this.height = this.mouseY+10;
		}
		
		private function handler_mouseUp($evt:MouseEvent):void
		{
			this.parent.removeEventListener(MouseEvent.MOUSE_MOVE, handler_resizeHeight);
			this.parent.removeEventListener(MouseEvent.MOUSE_UP, handler_mouseUp);
			this.parent.removeEventListener(MouseEvent.RELEASE_OUTSIDE, handler_mouseUp);
		}
		
		protected function handler_labelEnterState($evt:FlexEvent):void
		{
			this.minHeight = 640;
			//更新容器实际高度
			this.addEventListener(FlexEvent.UPDATE_COMPLETE, handler_updateComp);
			//更新一次frame管理按钮的状态
			updateFrameBTNS();
			//更新一次Label管理按钮的状态
			updateFrameInLabelBTNS();
			//更新一次帧的状态
			updateFrameOrLabelGRP();
		}
		
		protected function handler_frameEnterState($evt:FlexEvent):void
		{
			this.minHeight = 440;
			updateFrameBTNS();
			updateFrameOrLabelGRP();
		}
		
		protected function handler_updateComp($evt:FlexEvent):void
		{
			//trace('updateComp:', this.contentGroup.height, this.height);
			//若不更新，可能会出现容器内容被遮挡的情况
			if(this.height < this.contentGroup.height) this.height = this.contentGroup.height;
			this.removeEventListener(FlexEvent.UPDATE_COMPLETE, handler_updateComp);
		}
		
		//有可用Label的时候，才允许选择Frame或者Label显示
		public function updateFrameOrLabelGRP():void
		{
			var __enabled:Boolean = labelCB.selected && labelDDL.selectedItem;
			 frameOrLabelGRP.enabled= __enabled;
			 //不可选择的时候，返回默认选项
			 if(!__enabled) frameOrLabelRBG.selectedValue = true;
		}
		
		/**
		 * 更新与Frame相关的按钮状态
		 */
		public function updateFrameBTNS($playing:Boolean=false):void
		{
			//选中的帧中包含顶部或者底部帧的时候，禁止上移或者下移
			var __indices:Vector.<int> = frameDG.selectedIndices;
			if(__indices.length > 0)
			{
				var __inTop:Boolean = false;
				var __inBottom:Boolean = false;
				for (var i:int = 0; i < __indices.length; i++) 
				{
					if(__indices[i] == 0)
						__inTop = true;
					if(__indices[i] == frameDG.dataProvider.length-1)
						__inBottom = true;
				}
				upFrameBTN.enabled = !__inTop;
				downFrameBTN.enabled = !__inBottom;
				delFrameBTN.enabled = !$playing;
				//允许加入帧到label中
				addFrameToLabelBTN.enabled = labelCB.selected && labelDDL.selectedItem;
			}
			else
			{
				upFrameBTN.enabled = false;
				downFrameBTN.enabled = false;
				delFrameBTN.enabled = false;
				addFrameToLabelBTN.enabled = false;
			}
			selectAllFrameBTN.enabled = frameDG.dataProviderLength > 0;
		}
		
		/**
		 * 更新与label相关按钮的状态
		 */
		public function updateFrameInLabelBTNS():void
		{
			var __index:int = frameInLabelDG.selectedIndex;
			if(__index > -1)
			{
				removeFrameFromLabelBTN.enabled = true;
				upFrameInLabelBTN.enabled = __index > 0;
				downFrameInLabelBTN.enabled = __index < (frameInLabelDG.dataProvider.length - 1);
			}
			else
			{
				removeFrameFromLabelBTN.enabled = false;
				upFrameInLabelBTN.enabled = false;
				downFrameInLabelBTN.enabled = false;
			}
		}
		
		//向上移动label中的帧
		private function handler_upFrameInLabelBTNClick($evt:MouseEvent):void
		{
			var __oldIndex:int = frameInLabelDG.selectedIndex;
			var __framesInLabel:ArrayList = selectedLabelFrameList;
			__framesInLabel.addItemAt(__framesInLabel.removeItemAt(__oldIndex), __oldIndex-1);
			frameInLabelDG.selectedIndex = __oldIndex -1;
			updateFrameInLabelBTNS();
		}
		
		//向下移动label中的帧
		private function handler_downFrameInLabelBTNClick($evt:MouseEvent):void
		{
			var __oldIndex:int = frameInLabelDG.selectedIndex;
			var __framesInLabel:ArrayList = selectedLabelFrameList;
			__framesInLabel.addItemAt(__framesInLabel.removeItemAt(__oldIndex), __oldIndex+1);
			frameInLabelDG.selectedIndex = __oldIndex +1;
			updateFrameInLabelBTNS();
		}
		
		//从label中移除帧
		private function handler_removeFrameFromLabelBTNClick($evt:MouseEvent):void
		{
			var __frames:ArrayList = selectedLabelFrameList;
			var __delItem:FrameVO = __frames.getItemAt(frameInLabelDG.selectedIndex) as FrameVO;
			__frames.removeItem(__delItem);
			updateFrameInLabelBTNS();
		}
		
		//向label中添加帧
		private function handler_addFrameToLabelBTNClick($evt:MouseEvent):void
		{
			var __frames:Vector.<Object> = frameDG.selectedItems;
			var __framesInLabel:ArrayList = selectedLabelFrameList;
			for each(var __frame:FrameVO in __frames)
			{
				__framesInLabel.addItem(__frame);
			}
			updateFrameBTNS();
			updateFrameInLabelBTNS();
		}
	]]>
	</fx:Script>
</s:BorderContainer>
