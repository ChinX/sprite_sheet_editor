<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   implements="interf.IPreview"
				   xmlns:comps="view.comps.*">
	<fx:Metadata>
		[Event(name="previewLoadComplete", type="events.SSEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<s:RadioButtonGroup id="bgRBG" change="handler_bgSelect(event)"/>
		<comps:TransformTool id="transf" width="100" height="100" maxW="{sourceWidth}" maxH="{sourceHeight}" 
							 visible="{showTransformTool&amp;&amp;!scaleContent}"/>
	</fx:Declarations>
	<s:Scroller id="viewScroller" top="0" bottom="20" width="100%">
		<s:Group id="scrollerView" width="100%" height="100%">
			<s:BitmapImage id="chessboard" fillMode="repeat" width="{viewerWidth}" height="{viewerHeight}"/>
		</s:Group>
	</s:Scroller>
	<s:HGroup right="0" bottom="0" verticalAlign="bottom">
		<s:CheckBox id="showAllCB" change="handler_showAll(event)"/>
		<s:RadioButton id="showChessRB" selected="true" groupName="bgRBG"/>
		<s:RadioButton id="showWhiteRB" groupName="bgRBG"/>
		<s:RadioButton id="showBlackRB" groupName="bgRBG"/>
		<s:Label text="{sourceInfo}"/>
	</s:HGroup>
	<fx:Script>
	<![CDATA[
		import utils.Global;
		
		public static const LABEL_SHOW_ALL:String = '显示全部';
		public static const LABEL_CHESS:String = '方格背景';
		public static const LABEL_WHITE:String = '白色背景';
		public static const LABEL_BLACK:String = '黑色背景';
		
		[Bindable] public var showTransformTool:Boolean;
		[Bindable] public var scaleContent:Boolean;
		/**
		 * 被载入的显示对象的实际宽度。例如，对于swf来说，就是swf文件的宽度。
		 */
		[Bindable] public var sourceWidth:int=100;
		/**
		 * 被载入的显示对象的实际高度。
		 */
		[Bindable] public var sourceHeight:int=100;
		
		/**
		 * viewer的显示宽度。当scaleContent为false的时候，它与sourceWidth相等。
		 */
		[Bindable] public var viewerWidth:int=100;
		/**
		 * viewer的显示高度。当scaleContent为false的时候，它与sourceWidth相等。
		 */
		[Bindable] public var viewerHeight:int=100;
		
		[Bindable] public var sourceInfo:String;
		
		protected var _showAllCMI:ContextMenuItem;
		protected var _showCheckBGCMI:ContextMenuItem;
		protected var _showWhiteBGCMI:ContextMenuItem;
		protected var _showBlackBGCMI:ContextMenuItem;
		
		override protected function createChildren():void
		{
			super.createChildren();
			init();
		}
		
		protected function init():void
		{
			chessboard.source = Global.BMP_CHESS;
			showAllCB.label = LABEL_SHOW_ALL;
			showWhiteRB.label = LABEL_WHITE;
			showBlackRB.label = LABEL_BLACK;
			showChessRB.label = LABEL_CHESS;
		}
		
		protected function get bg():*
		{
			return null;
		}
		
		private function handler_showAll($evt:Event):void
		{
			scaleContent = showAllCB.selected;
			handler_loadComplete(null);
		}
		
		private function handler_bgSelect($evt:Event):void
		{
			var __bgName:String = bgRBG.selectedValue as String;
			var __source:* = null;
			if(__bgName == LABEL_CHESS)
				__source = Global.BMP_CHESS;
			else if(__bgName == LABEL_WHITE)
				__source = new BitmapData(5,5,false,0xFFFFFF);
			else
				__source = new BitmapData(5,5,false,0x000000);
			bg.source = __source;
		}
		
		protected function handler_loadComplete($event:Event):void
		{
		}
		
		public function destroy():void
		{
		}
		
		public function set source($so:*):void
		{
		}
		
		public function get content():IBitmapDrawable
		{
			return null;
		}
	]]>
	</fx:Script>
</s:BorderContainer>
