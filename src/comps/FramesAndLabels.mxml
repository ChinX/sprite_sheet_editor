<?xml version="1.0" encoding="utf-8"?>
<!-- zengrong.net -->
<!-- 创建者:zrong(zrongzrong@gmail.com) -->
<!-- 创建时间：2011-8-17 -->
<!-- 管理帧和Label -->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  currentState="{labelCB.selected?'frameAndLabel':'frame'}">
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
	</s:layout>
	<s:states>
		<s:State name="frame"/>
		<s:State name="frameAndLabel"/>
	</s:states>
	<s:Label id="frameLabel" fontWeight="bold" text="{labelList.selectedItem?('LABEL('+labelList.selectedItem.name+')中的帧'):'所有可用帧'}"/>
	<s:HGroup verticalAlign="middle" width="100%">
		<s:Label width="50" text="帧数:{frameAC.length}"/>
		<s:Button id="prevBTN" label="上帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing&amp;&amp;frameDG.selectedIndex>0}" 
				  click="prevFrame();"/>
		<s:Button id="nextBTN" label="下帧" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing&amp;&amp;frameDG.selectedIndex&lt;frameAC.length-1}" 
				  click="nextFrame();"/>
		<s:Button id="delBTN" label="删除" width="100%" enabled="{frameDG.selectedItem&amp;&amp;!playing}" 
				  click="handler_delBTNclick(event)"
				  toolTip="从帧列表中删除一帧。删除后必须行优化才能看到Sheet的更新。"/>
		<s:Button id="allBTN" width="100%" label="全选" enabled="{frameAC&amp;&amp;frameAC.length>0}"
				  click="handler_allBTNclick(event)"/>
	</s:HGroup>
	<s:DataGrid id="frameDG" width="100%" height="150" selectionMode="multipleRows" dataProvider="{frameAC}"
				sortableColumns="false" valueCommit="handler_frameDGValueCommit(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="帧号" width="40" dataField="frameNum"/>
				<s:GridColumn headerText="名称" width="60" dataField="frameName"/>
				<s:GridColumn headerText="修剪尺寸" dataField="frameSize"/>
				<s:GridColumn headerText="原始尺寸" dataField="originSize"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:CheckBox id="labelCB" label="使用Label"/>
		<s:TextInput id="labelInput" includeIn="frameAndLabel" width="100%"
					 text="{labelList.selectedItem.label}"
					 toolTip="label格式：英文+数字"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="frameAndLabel">
		<s:Button id="addLabelBTN" width="100%" label="加Label"
				  click="handler_addLabelBTNclick(event)"
				  enabled="{frameDG.selectedItem &amp;&amp; labelInput.text}" toolTip="添加一个Label到列表中"/>
		<s:Button id="removeLabelBTN" width="100%" label="删Label"
				  click="handler_removeLabelBTNclick(event)" enabled="{labelList.selectedItem}"
				  toolTip="删除选中的Label"/>
		<s:Button id="renameBTN" width="100%" label="改Label" 
				  click="handler_renameBTNclick(event)"
				  enabled="{labelInput.text&amp;&amp;labelList.selectedItem}" toolTip="修改Label名称"/>
		<s:Button id="cancelBTN" width="100%" label="取消选择" enabled="{labelList.selectedItem}" 
				  click="labelList.selectedIndex=-1;"/>
	</s:HGroup>
	<s:List id="labelList" width="100%" height="80" dataProvider="{labelAL}"
			valueCommit="handler_labelListvalueComit(event)" labelField="name" includeIn="frameAndLabel" itemCreationPolicy="immediate"/>
	<fx:Metadata>
		//[Event(name="labelChange", type="events.InfoEvent")]
		//[Event(name="frameChange", type="events.InfoEvent")]
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.IList;
		import mx.events.FlexEvent;
		
		import org.zengrong.display.spritesheet.SpriteSheetMetadata;
		
		import spark.collections.Sort;
		import spark.collections.SortField;
		import spark.events.IndexChangeEvent;
		
		import utils.Funs;
		import utils.Global;
		
		import vo.FrameVO;
		import vo.LabelVO;

		
		[Bindable] public var labelAL:ArrayList;
		[Bindable] public var frameAC:ArrayCollection;
		[Bindable] public var selectedFrameNum:int;		//当前选择的帧编号
		[Bindable] public var selectedFrameIndices:Vector.<int>;	//frameDG中选择的索引
		[Bindable] public var playing:Boolean;	//是否正在播放动画。如果是播放动画状态，那么valueCommit的时候，就不更新selectedFrameIndices的值
		
		private var _framesNotInLabels:ArrayCollection;	//保存不在Label中的所有帧
		private var _currentIndex:int=-1;					//当前正在播放的帧在selectedFrameIndices中的索引
		
		public function get selectedFrameIndex():int
		{
			if(frameDG.selectedItem)
				return FrameVO(frameDG.selectedItem).frameNum;
			return -1;
		}
		
		public function init():void
		{
			var __meta:SpriteSheetMetadata = Global.instance.adjustedSheet.metadata;
			_framesNotInLabels = new ArrayCollection();
			var __frame:FrameVO = null;
			var i:int=0;
			for (i = 0; i < __meta.totalFrame; i++) 
			{
				__frame = new FrameVO(i,
						__meta.hasName? __meta.names[i]:null,
						__meta.frameRects[i],
						__meta.originalFrameRects[i]);
				_framesNotInLabels.addItem(__frame);
			}
			
			labelAL = new ArrayList();
			labelCB.selected = __meta.hasLabel;
			if(__meta.hasLabel)
			{
				var __label:String = '';
				var __framesIndex:Array = null;
				var __framesInLabel:ArrayList = null;
				//建立Label后，要从frameAL列表中删除的帧的索引（因为这些帧被加入到labelAL中了）
				var __toDelFrames:Array = [];
				for (i = 0; i < __meta.labels.length; i++) 
				{
					__label = __meta.labels[i];
					__framesIndex = __meta.labelsFrame[__label];
					__framesInLabel = new ArrayList();
					for (var k:int = 0; k < __framesIndex.length; k++) 
					{
						__framesInLabel.addItem(_framesNotInLabels.getItemAt(__framesIndex[k]));
						__toDelFrames.push(__framesIndex[k]);
					}
					labelAL.addItem(new LabelVO(__label, __framesInLabel));
				}
				//从最后一个要删除的帧开始删除（这样就不会影响到_framesNotInLabels的顺序，确保删除的成功）
				__toDelFrames.sort(Array.NUMERIC);
				while(__toDelFrames.length>0)
					_framesNotInLabels.removeItemAt(__toDelFrames.pop());
			}
			//如果当前有不在Label中的帧，就显示它们
			if(_framesNotInLabels.length>0)
			{
				selectedFrameIndices = new Vector.<int>;
				for (var j:int = 0; j < _framesNotInLabels.length; j++) 
				{
					selectedFrameIndices[j] = j;
				}
				refreshFrameDG();
				trace('init:', selectedFrameIndices);
				frameDG.selectedIndices = selectedFrameIndices;
			}
		}
		
		public function destroy():void
		{
			labelAL = null;
			frameAC = null;
			selectedFrameIndices = null;
			_framesNotInLabels = null;
			pause();
		}
		
		public function play():void
		{
			playing = true;
			_currentIndex = 0;
		}
		
		public function pause():void
		{
			playing = false;
			_currentIndex = -1;
		}
		
		public function prevFrame():void
		{
			if(frameDG.selectedIndex > 0)
				frameDG.selectedIndex --;
		}
		
		public function nextFrame():void
		{
			trace('nextFrame:', playing, frameDG.selectedIndex, selectedFrameIndices);
			if(playing)
			{
				frameDG.selectedIndex = selectedFrameIndices[_currentIndex];
				if(_currentIndex == -1 || _currentIndex == selectedFrameIndices.length-1)
					_currentIndex = 0;
				else
					_currentIndex ++;
			}
			else
			{
				if(frameDG.selectedIndex < frameAC.length-1)
					frameDG.selectedIndex ++;
				else
					frameDG.selectedIndex = frameAC.length-1;
			}
			
		}
		
		/**
		 * 获取metadata中需要的label数据
		 */
		public function getLabels():Object
		{
			var __hasLabel:Boolean = labelCB.selected && labelAL.length>0;
			if(__hasLabel)
			{
				var __labels:Vector.<String> = new Vector.<String>(labelAL.length, true);
				var __labelsFrame:Object = {};
				var __labelItem:Object = null;
				for (var i:int = 0; i < labelAL.length; i++) 
				{
					__labelItem = labelAL.getItemAt(i);
					__labels[i] = __labelItem.label;
					__labelsFrame[__labelItem.label] = __labelItem.frame;
				}
				return {hasLabel:__hasLabel, labels:__labels, labelsFrame:__labelsFrame};
			}
			return {hasLabel:__hasLabel};
		}
		
		//----------------------------------------
		// 内部方法
		//----------------------------------------
		
		/**
		 * 将帧信息中保存的大于$frameNum的帧的索引减1
		 */
		private function refreshFrameNum($list:IList, $frameNum:int):void
		{
			//删除了1帧，就要将帧信息中保存的大于此帧索引的帧的索引减1
			for (var i:int = 0; i < $list.length; i++) 
			{
				var __item:FrameVO = $list.getItemAt(i) as FrameVO;
				if(__item.frameNum>$frameNum)
				{
					__item.frameNum --;
					$list.setItemAt(__item, i);
				}
			}
		}
		
		/**
		 * 根据选择情况刷新frameDG的显示
		 */
		private function refreshFrameDG():void
		{
			var i:int=0;
			if(!_framesNotInLabels.sort)
			{
				_framesNotInLabels.sort = new Sort();
				_framesNotInLabels.sort.fields = [new SortField('frameNum', false, true)];
			}
			_framesNotInLabels.refresh();
			frameAC = new ArrayCollection();
			if(labelCB.selected && labelList.selectedIndex != -1)
			{
				frameAC.addAll(LabelVO(labelList.selectedItem).frames);
			}
			else
			{
				frameAC.addAll(_framesNotInLabels);
			}
			frameDG.selectedIndex = -1;
		}
		//----------------------------------------
		// handler
		//----------------------------------------
		protected function handler_frameDGValueCommit($event:FlexEvent):void
		{
			//只有不在播放状态，才更新选择的帧列表
			if(!playing)
			{
				selectedFrameIndices = frameDG.selectedIndices.concat();
				//获取到的Vector是降序的，倒转它
				selectedFrameIndices.sort(Array.NUMERIC);
				trace('更新indices:', selectedFrameIndices);
			}
			selectedFrameNum = frameDG.selectedIndex==-1?-1:FrameVO(frameDG.selectedItem).frameNum;
			trace('dgValueCommit:', selectedFrameNum, addLabelBTN);
			dispatchEvent(new Event(Event.CHANGE));
		}
		
		protected function handler_labelListvalueComit($event:FlexEvent):void
		{
			refreshFrameDG();
			trace('handler_labelListvalueComit:', selectedFrameNum, addLabelBTN);
		}
		
		protected function handler_addLabelBTNclick($event:MouseEvent):void
		{
			//trace(frameDG.selectedIndex, frameDG.selectedItem, frameDG.selectedItems);
			if(!frameDG.selectedItem)
			{
				Funs.alert('请先选择帧！');
				addLabelBTN.enabled = false;
				return;
			}
			for (var i:int = 0; i < labelAL.length; i++) 
			{
				if(LabelVO(labelAL.getItemAt(i)).name == labelInput.text)
				{
					Funs.alert('Label不允许重复！');
					return;
				}
			}
			var __framesInLabel:Vector.<FrameVO> =  Vector.<FrameVO>(frameDG.selectedItems.concat());
			__framesInLabel.sort(Array.NUMERIC);
			var __al:ArrayList = new ArrayList();
			while(__framesInLabel.length>0)
			{
				var __item:FrameVO = __framesInLabel.shift() as FrameVO;
				__al.addItem(__item);
				trace('向Label添加帧：', __item.frameNum);
				//删除_framesNotInLabels中的帧，ArrayCollection没有removeItem，真杯具
				var __itemIndex:int = _framesNotInLabels.getItemIndex(__item);
				_framesNotInLabels.removeItemAt(__itemIndex);
			}
			labelAL.addItem(new LabelVO(labelInput.text, __al));
			labelList.selectedIndex = labelAL.length - 1;
			refreshFrameDG();
		}
		
		protected function handler_removeLabelBTNclick($event:MouseEvent):void
		{
			var __item:LabelVO = labelList.selectedItem as LabelVO;
			for (var i:int = 0; i < __item.frames.length; i++) 
			{
				var __frame:FrameVO = __item.frames.getItemAt(i) as FrameVO;
				_framesNotInLabels.addItem(__frame);
			}
			labelAL.removeItem(__item);
			refreshFrameDG();
		}
		
		protected function handler_renameBTNclick($event:MouseEvent):void
		{
			var __item:Object = labelAL.getItemAt(labelList.selectedIndex);
			__item.name = labelInput.text;
			labelAL.setItemAt(__item, labelList.selectedIndex);
		}

		protected function handler_delBTNclick($event:MouseEvent):void
		{
			nextBTN.enabled = false;
			prevBTN.enabled = false;
			while(selectedFrameIndices.length>0)
			{
				var __delItem:FrameVO = frameAC.getItemAt(selectedFrameIndices.pop()) as FrameVO;
				Global.instance.sheet.removeFrameAt(__delItem.frameNum);
				Global.instance.adjustedSheet.removeFrameAt(__delItem.frameNum);
				//若选择了Label，在labelVO中删除
				if(labelCB.selected && labelList.selectedIndex!=-1)
				{
					for(var i:int=0;i<labelAL.length;i++)
					{
						var __labelItem:LabelVO = labelAL.getItemAt(i) as LabelVO;
						refreshFrameNum(__labelItem.frames, __delItem.frameNum);
					}
				}
				//如果没有选择label，就在_frameNotInLabels中删除
				else
				{
					var __index:int = _framesNotInLabels.getItemIndex(__delItem);
					_framesNotInLabels.removeItemAt(__index);
					refreshFrameNum(_framesNotInLabels, __delItem.frameNum);
				}
			}
			selectedFrameIndices = null;
			//刷新frameDG的显示
			refreshFrameDG();
		}
		
		protected function handler_allBTNclick($event:MouseEvent):void
		{
			var __indics:Vector.<int> = new Vector.<int>;
			for (var i:int = 0; i < frameAC.length; i++) 
			{
				__indics[i] = i;
			}
			frameDG.selectedIndices = __indics;
		}
		
	]]>
	</fx:Script>
</s:BorderContainer>
